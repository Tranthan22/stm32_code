
spi_lora_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f8  080049f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08004a68  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004a68  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b86c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce3  00000000  00000000  0002b947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000760  00000000  00000000  0002dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d7c  00000000  00000000  0002e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd90  00000000  00000000  000454bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089622  00000000  00000000  0005124c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fc4  00000000  00000000  000da870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000dd834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004920 	.word	0x08004920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004920 	.word	0x08004920

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <newLoRa>:
#include <LoRa.h>
#include "main.h"

LoRa newLoRa(SPI_HandleTypeDef* _hspi){
 800058c:	b4b0      	push	{r4, r5, r7}
 800058e:	b08f      	sub	sp, #60	; 0x3c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	LoRa new_LoRa;

	//
	new_LoRa.frequency             = 420.0       ;
 8000596:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_9     ;
 800059c:	2309      	movs	r3, #9
 800059e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_250KHz ;
 80005a2:	2308      	movs	r3, #8
 80005a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80005ae:	23ff      	movs	r3, #255	; 0xff
 80005b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80005ba:	2308      	movs	r3, #8
 80005bc:	86bb      	strh	r3, [r7, #52]	; 0x34

	//Pin config
	new_LoRa.CS_port         = NNC_GPIO_Port;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <newLoRa+0x70>)
 80005c0:	60fb      	str	r3, [r7, #12]
	new_LoRa.CS_pin          = NNC_Pin;
 80005c2:	2310      	movs	r3, #16
 80005c4:	823b      	strh	r3, [r7, #16]
	new_LoRa.reset_port      = RESET_GPIO_Port;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <newLoRa+0x70>)
 80005c8:	617b      	str	r3, [r7, #20]
	new_LoRa.reset_pin       = RESET_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	833b      	strh	r3, [r7, #24]
	new_LoRa.DIO0_port       = DIO0_GPIO_Port;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <newLoRa+0x74>)
 80005d0:	61fb      	str	r3, [r7, #28]
	new_LoRa.DIO0_pin        = DIO0_Pin;
 80005d2:	2301      	movs	r3, #1
 80005d4:	843b      	strh	r3, [r7, #32]
	new_LoRa.hSPIx           = _hspi;
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
	return new_LoRa;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	f107 040c 	add.w	r4, r7, #12
 80005e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	373c      	adds	r7, #60	; 0x3c
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bcb0      	pop	{r4, r5, r7}
 80005fa:	4770      	bx	lr
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020400 	.word	0x40020400

08000604 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800060e:	2101      	movs	r1, #1
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 f9a0 	bl	8000956 <LoRa_read>
 8000616:	4603      	mov	r3, r0
 8000618:	73bb      	strb	r3, [r7, #14]
	data = read;
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d107      	bne.n	8000634 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	f023 0307 	bic.w	r3, r3, #7
 800062a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
 8000632:	e03e      	b.n	80006b2 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d10c      	bne.n	8000654 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800063a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800063e:	f023 0307 	bic.w	r3, r3, #7
 8000642:	b25b      	sxtb	r3, r3
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	b25b      	sxtb	r3, r3
 800064a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
 8000652:	e02e      	b.n	80006b2 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d10c      	bne.n	8000674 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800065a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800065e:	f023 0307 	bic.w	r3, r3, #7
 8000662:	b25b      	sxtb	r3, r3
 8000664:	f043 0303 	orr.w	r3, r3, #3
 8000668:	b25b      	sxtb	r3, r3
 800066a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2203      	movs	r2, #3
 8000670:	61da      	str	r2, [r3, #28]
 8000672:	e01e      	b.n	80006b2 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	2b05      	cmp	r3, #5
 8000678:	d10c      	bne.n	8000694 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800067a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800067e:	f023 0307 	bic.w	r3, r3, #7
 8000682:	b25b      	sxtb	r3, r3
 8000684:	f043 0305 	orr.w	r3, r3, #5
 8000688:	b25b      	sxtb	r3, r3
 800068a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2205      	movs	r2, #5
 8000690:	61da      	str	r2, [r3, #28]
 8000692:	e00e      	b.n	80006b2 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2b06      	cmp	r3, #6
 8000698:	d10b      	bne.n	80006b2 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800069a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800069e:	f023 0307 	bic.w	r3, r3, #7
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	f043 0306 	orr.w	r3, r3, #6
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2206      	movs	r2, #6
 80006b0:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f966 	bl	800098a <LoRa_write>
	//HAL_Delay(10);
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4613      	mov	r3, r2
 80006d4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	889b      	ldrh	r3, [r3, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	4619      	mov	r1, r3
 80006e2:	f001 fac9 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6998      	ldr	r0, [r3, #24]
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	f001 ffee 	bl	80026d2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006f6:	bf00      	nop
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fbd7 	bl	8002eb0 <HAL_SPI_GetState>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d1f7      	bne.n	80006f8 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6998      	ldr	r0, [r3, #24]
 800070c:	8b3a      	ldrh	r2, [r7, #24]
 800070e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000712:	6839      	ldr	r1, [r7, #0]
 8000714:	f002 f919 	bl	800294a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000718:	bf00      	nop
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fbc6 	bl	8002eb0 <HAL_SPI_GetState>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d1f7      	bne.n	800071a <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	889b      	ldrh	r3, [r3, #4]
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	f001 fa9f 	bl	8001c78 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4613      	mov	r3, r2
 8000750:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	889b      	ldrh	r3, [r3, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	f001 fa8b 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6998      	ldr	r0, [r3, #24]
 8000766:	88fa      	ldrh	r2, [r7, #6]
 8000768:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	f001 ffb0 	bl	80026d2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000772:	bf00      	nop
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fb99 	bl	8002eb0 <HAL_SPI_GetState>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d1f7      	bne.n	8000774 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	6998      	ldr	r0, [r3, #24]
 8000788:	8b3a      	ldrh	r2, [r7, #24]
 800078a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	f001 ff9f 	bl	80026d2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000794:	bf00      	nop
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fb88 	bl	8002eb0 <HAL_SPI_GetState>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d1f7      	bne.n	8000796 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	889b      	ldrh	r3, [r3, #4]
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	f001 fa61 	bl	8001c78 <HAL_GPIO_WritePin>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	04db      	lsls	r3, r3, #19
 80007cc:	115b      	asrs	r3, r3, #5
 80007ce:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80007d6:	7afb      	ldrb	r3, [r7, #11]
 80007d8:	461a      	mov	r2, r3
 80007da:	2106      	movs	r1, #6
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f8d4 	bl	800098a <LoRa_write>
	HAL_Delay(5);
 80007e2:	2005      	movs	r0, #5
 80007e4:	f000 ff8e 	bl	8001704 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2107      	movs	r1, #7
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f8c8 	bl	800098a <LoRa_write>
	HAL_Delay(5);
 80007fa:	2005      	movs	r0, #5
 80007fc:	f000 ff82 	bl	8001704 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	461a      	mov	r2, r3
 8000808:	2108      	movs	r1, #8
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f8bd 	bl	800098a <LoRa_write>
	HAL_Delay(5);
 8000810:	2005      	movs	r0, #5
 8000812:	f000 ff77 	bl	8001704 <HAL_Delay>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b0c      	cmp	r3, #12
 800082c:	dd01      	ble.n	8000832 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800082e:	230c      	movs	r3, #12
 8000830:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	dc01      	bgt.n	800083c <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800083c:	211e      	movs	r1, #30
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f889 	bl	8000956 <LoRa_read>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000848:	200a      	movs	r0, #10
 800084a:	f000 ff5b 	bl	8001704 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	b2da      	uxtb	r2, r3
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f003 030f 	and.w	r3, r3, #15
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	461a      	mov	r2, r3
 8000866:	211e      	movs	r1, #30
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f88e 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 800086e:	200a      	movs	r0, #10
 8000870:	f000 ff48 	bl	8001704 <HAL_Delay>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	461a      	mov	r2, r3
 800088c:	2109      	movs	r1, #9
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f87b 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 8000894:	200a      	movs	r0, #10
 8000896:	f000 ff35 	bl	8001704 <HAL_Delay>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b2c      	cmp	r3, #44	; 0x2c
 80008b8:	d801      	bhi.n	80008be <LoRa_setOCP+0x1a>
		current = 45;
 80008ba:	232d      	movs	r3, #45	; 0x2d
 80008bc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2bf0      	cmp	r3, #240	; 0xf0
 80008c2:	d901      	bls.n	80008c8 <LoRa_setOCP+0x24>
		current = 240;
 80008c4:	23f0      	movs	r3, #240	; 0xf0
 80008c6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b78      	cmp	r3, #120	; 0x78
 80008cc:	d809      	bhi.n	80008e2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	3b2d      	subs	r3, #45	; 0x2d
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <LoRa_setOCP+0x78>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1052      	asrs	r2, r2, #1
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e00b      	b.n	80008fa <LoRa_setOCP+0x56>
	else if(current <= 240)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2bf0      	cmp	r3, #240	; 0xf0
 80008e6:	d808      	bhi.n	80008fa <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	331e      	adds	r3, #30
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LoRa_setOCP+0x78>)
 80008ee:	fb82 1203 	smull	r1, r2, r2, r3
 80008f2:	1092      	asrs	r2, r2, #2
 80008f4:	17db      	asrs	r3, r3, #31
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3320      	adds	r3, #32
 80008fe:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	461a      	mov	r2, r3
 8000904:	210b      	movs	r1, #11
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f83f 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 800090c:	200a      	movs	r0, #10
 800090e:	f000 fef9 	bl	8001704 <HAL_Delay>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	66666667 	.word	0x66666667

08000920 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000928:	211e      	movs	r1, #30
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f813 	bl	8000956 <LoRa_read>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f043 0307 	orr.w	r3, r3, #7
 800093a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	461a      	mov	r2, r3
 8000940:	211e      	movs	r1, #30
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f821 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 8000948:	200a      	movs	r0, #10
 800094a:	f000 fedb 	bl	8001704 <HAL_Delay>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af02      	add	r7, sp, #8
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000968:	b2db      	uxtb	r3, r3
 800096a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800096c:	f107 030f 	add.w	r3, r7, #15
 8000970:	f107 010e 	add.w	r1, r7, #14
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fea3 	bl	80006c6 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af02      	add	r7, sp, #8
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	70fb      	strb	r3, [r7, #3]
 8000996:	4613      	mov	r3, r2
 8000998:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009a4:	78bb      	ldrb	r3, [r7, #2]
 80009a6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009a8:	f107 030f 	add.w	r3, r7, #15
 80009ac:	f107 010e 	add.w	r1, r7, #14
 80009b0:	2201      	movs	r2, #1
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	2201      	movs	r2, #1
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fec3 	bl	8000742 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	461a      	mov	r2, r3
 80009d0:	460b      	mov	r3, r1
 80009d2:	72fb      	strb	r3, [r7, #11]
 80009d4:	4613      	mov	r3, r2
 80009d6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80009d8:	7afb      	ldrb	r3, [r7, #11]
 80009da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	889b      	ldrh	r3, [r3, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	f001 f943 	bl	8001c78 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6998      	ldr	r0, [r3, #24]
 80009f6:	f107 0117 	add.w	r1, r7, #23
 80009fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009fe:	2201      	movs	r2, #1
 8000a00:	f001 fe67 	bl	80026d2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a04:	bf00      	nop
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fa50 	bl	8002eb0 <HAL_SPI_GetState>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d1f7      	bne.n	8000a06 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6998      	ldr	r0, [r3, #24]
 8000a1a:	7abb      	ldrb	r3, [r7, #10]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f001 fe55 	bl	80026d2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a28:	bf00      	nop
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fa3e 	bl	8002eb0 <HAL_SPI_GetState>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d1f7      	bne.n	8000a2a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f001 f917 	bl	8001c78 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]

	return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	460b      	mov	r3, r1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a84:	2101      	movs	r1, #1
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fdbc 	bl	8000604 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000a8c:	210e      	movs	r1, #14
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff ff61 	bl	8000956 <LoRa_read>
 8000a94:	4603      	mov	r3, r0
 8000a96:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	210d      	movs	r1, #13
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ff73 	bl	800098a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2122      	movs	r1, #34	; 0x22
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff ff6d 	bl	800098a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ff84 	bl	80009c4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000abc:	2103      	movs	r1, #3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fda0 	bl	8000604 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000ac4:	2112      	movs	r1, #18
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f7ff ff45 	bl	8000956 <LoRa_read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000ad0:	7cfb      	ldrb	r3, [r7, #19]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00a      	beq.n	8000af0 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	2112      	movs	r1, #18
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff53 	bl	800098a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000ae4:	6979      	ldr	r1, [r7, #20]
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff fd8c 	bl	8000604 <LoRa_gotoMode>
			return 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e00f      	b.n	8000b10 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d105      	bne.n	8000b08 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000afc:	6979      	ldr	r1, [r7, #20]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fd80 	bl	8000604 <LoRa_gotoMode>
				return 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e003      	b.n	8000b10 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 fdfb 	bl	8001704 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000b0e:	e7d9      	b.n	8000ac4 <LoRa_transmit+0x5c>
	}
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b20:	2105      	movs	r1, #5
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fd6e 	bl	8000604 <LoRa_gotoMode>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	e007      	b.n	8000b58 <LoRa_receive+0x28>
		data[i]=0;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf3      	blt.n	8000b48 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b60:	2101      	movs	r1, #1
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff fd4e 	bl	8000604 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b68:	2112      	movs	r1, #18
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff fef3 	bl	8000956 <LoRa_read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b74:	7cfb      	ldrb	r3, [r7, #19]
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d02f      	beq.n	8000bde <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	2112      	movs	r1, #18
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff ff01 	bl	800098a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b88:	2113      	movs	r1, #19
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fee3 	bl	8000956 <LoRa_read>
 8000b90:	4603      	mov	r3, r0
 8000b92:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b94:	2110      	movs	r1, #16
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff fedd 	bl	8000956 <LoRa_read>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ba0:	7cfb      	ldrb	r3, [r7, #19]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	210d      	movs	r1, #13
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff feef 	bl	800098a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000bac:	7cba      	ldrb	r2, [r7, #18]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	bf28      	it	cs
 8000bb4:	4613      	movcs	r3, r2
 8000bb6:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00b      	b.n	8000bd6 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	18d4      	adds	r4, r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff fec5 	bl	8000956 <LoRa_read>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	7ffb      	ldrb	r3, [r7, #31]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbef      	blt.n	8000bbe <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000bde:	2105      	movs	r1, #5
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f7ff fd0f 	bl	8000604 <LoRa_gotoMode>
    return min;
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3724      	adds	r7, #36	; 0x24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd90      	pop	{r4, r7, pc}

08000bf0 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff2a 	bl	8000a52 <LoRa_isvalid>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 8093 	beq.w	8000d2c <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000c06:	2100      	movs	r1, #0
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fcfb 	bl	8000604 <LoRa_gotoMode>
			HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f000 fd78 	bl	8001704 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000c14:	2101      	movs	r1, #1
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fe9d 	bl	8000956 <LoRa_read>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000c20:	200a      	movs	r0, #10
 8000c22:	f000 fd6f 	bl	8001704 <HAL_Delay>
			data = read | 0x80;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c2c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	461a      	mov	r2, r3
 8000c32:	2101      	movs	r1, #1
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff fea8 	bl	800098a <LoRa_write>
			HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f000 fd62 	bl	8001704 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fdb9 	bl	80007be <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fe11 	bl	800087c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fe1e 	bl	80008a4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c68:	2223      	movs	r2, #35	; 0x23
 8000c6a:	210c      	movs	r1, #12
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fe8c 	bl	800098a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fe54 	bl	8000920 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fdcc 	bl	800081e <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	211f      	movs	r1, #31
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fe7d 	bl	800098a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4413      	add	r3, r2
 8000caa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	211d      	movs	r1, #29
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fe69 	bl	800098a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fe5f 	bl	800098a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2121      	movs	r1, #33	; 0x21
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe57 	bl	800098a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fe39 	bl	8000956 <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000cee:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fe47 	bl	800098a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fc80 	bl	8000604 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f000 fcfa 	bl	8001704 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000d10:	2142      	movs	r1, #66	; 0x42
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fe1f 	bl	8000956 <LoRa_read>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d101      	bne.n	8000d26 <LoRa_init+0x136>
				return LORA_OK;
 8000d22:	23c8      	movs	r3, #200	; 0xc8
 8000d24:	e004      	b.n	8000d30 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000d26:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000d2a:	e001      	b.n	8000d30 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000d2c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <concatenateStrings>:
#include "LoRa_f.h"
#include "main.h"

char* concatenateStrings(const char* str1, const char* str2) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    size_t len1 = strlen(str1);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fa4c 	bl	80001e0 <strlen>
 8000d48:	6178      	str	r0, [r7, #20]
    size_t len2 = strlen(str2);
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f7ff fa48 	bl	80001e0 <strlen>
 8000d50:	6138      	str	r0, [r7, #16]
    char* result = (char*)malloc(len1 + len2 + 1);
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4413      	add	r3, r2
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fdba 	bl	80038d4 <malloc>
 8000d60:	4603      	mov	r3, r0
 8000d62:	60fb      	str	r3, [r7, #12]

    if (result == NULL) {
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <concatenateStrings+0x48>
        fprintf(stderr, "Khong the cap phat bo nhos.\n");
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <concatenateStrings+0x64>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	221c      	movs	r2, #28
 8000d72:	2101      	movs	r1, #1
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <concatenateStrings+0x68>)
 8000d76:	f002 ff65 	bl	8003c44 <fwrite>
        exit(EXIT_FAILURE);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f002 fd98 	bl	80038b0 <exit>
    }

    strcpy(result, str1);
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f003 f8fe 	bl	8003f84 <strcpy>
    strcat(result, str2);
 8000d88:	6839      	ldr	r1, [r7, #0]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f003 f868 	bl	8003e60 <strcat>

    return result;
 8000d90:	68fb      	ldr	r3, [r7, #12]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000064 	.word	0x20000064
 8000da0:	08004938 	.word	0x08004938

08000da4 <transmit_test>:
void transmit_test(LoRa* _LoRa){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  char* send_data = concatenateStrings("", "du lieu truyen di la");
 8000dac:	4910      	ldr	r1, [pc, #64]	; (8000df0 <transmit_test+0x4c>)
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <transmit_test+0x50>)
 8000db0:	f7ff ffc2 	bl	8000d38 <concatenateStrings>
 8000db4:	60f8      	str	r0, [r7, #12]
  sprintf(send_data + strlen(send_data), "%d" , 1234);
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff fa12 	bl	80001e0 <strlen>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000dc6:	490c      	ldr	r1, [pc, #48]	; (8000df8 <transmit_test+0x54>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 ff49 	bl	8003c60 <siprintf>
  //snprintf(send_data,sizeof(send_data),"du lieu truyen di la 1234");
  LoRa_transmit(_LoRa, (uint8_t*)send_data, strlen(send_data), 100);
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff fa06 	bl	80001e0 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	2364      	movs	r3, #100	; 0x64
 8000dda:	68f9      	ldr	r1, [r7, #12]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe43 	bl	8000a68 <LoRa_transmit>
  free(send_data);
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f002 fd7e 	bl	80038e4 <free>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	08004958 	.word	0x08004958
 8000df4:	08004970 	.word	0x08004970
 8000df8:	08004974 	.word	0x08004974

08000dfc <receive_test>:
void receive_test(LoRa* _LoRa, UART_HandleTypeDef *huart, uint8_t* receive_data){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <receive_test+0x28>)
 8000e0e:	f000 ff4c 	bl	8001caa <HAL_GPIO_TogglePin>
	LoRa_receive(_LoRa, receive_data, 10);
 8000e12:	220a      	movs	r2, #10
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff fe8a 	bl	8000b30 <LoRa_receive>


}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40020800 	.word	0x40020800

08000e28 <LoRa_start>:

void LoRa_start(LoRa* _LoRa, UART_HandleTypeDef *huart){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	if (LoRa_init(_LoRa)==LORA_OK){
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fedc 	bl	8000bf0 <LoRa_init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2bc8      	cmp	r3, #200	; 0xc8
 8000e3c:	d10f      	bne.n	8000e5e <LoRa_start+0x36>
		//char send_data[] = "hello";
		  LoRa_transmit(_LoRa, (uint8_t*)" LoRa_STM ok", sizeof("hello LoRa_STM ok"), 100);
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	2212      	movs	r2, #18
 8000e42:	490c      	ldr	r1, [pc, #48]	; (8000e74 <LoRa_start+0x4c>)
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fe0f 	bl	8000a68 <LoRa_transmit>
		  HAL_UART_Transmit(huart, (uint8_t*)" LoRa_STM ok", sizeof("hello LoRa_STM ok"), 100);
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	2212      	movs	r2, #18
 8000e4e:	4909      	ldr	r1, [pc, #36]	; (8000e74 <LoRa_start+0x4c>)
 8000e50:	6838      	ldr	r0, [r7, #0]
 8000e52:	f002 f9b8 	bl	80031c6 <HAL_UART_Transmit>
		  LoRa_startReceiving(_LoRa);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fe5e 	bl	8000b18 <LoRa_startReceiving>
	}
	else{
		  HAL_UART_Transmit(huart, (uint8_t*)" LoRa_STM fail", sizeof("hello LoRa_STM fail"), 200);
	}
}
 8000e5c:	e005      	b.n	8000e6a <LoRa_start+0x42>
		  HAL_UART_Transmit(huart, (uint8_t*)" LoRa_STM fail", sizeof("hello LoRa_STM fail"), 200);
 8000e5e:	23c8      	movs	r3, #200	; 0xc8
 8000e60:	2214      	movs	r2, #20
 8000e62:	4905      	ldr	r1, [pc, #20]	; (8000e78 <LoRa_start+0x50>)
 8000e64:	6838      	ldr	r0, [r7, #0]
 8000e66:	f002 f9ae 	bl	80031c6 <HAL_UART_Transmit>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	08004978 	.word	0x08004978
 8000e78:	08004988 	.word	0x08004988

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fbcd 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f827 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 f8ed 	bl	8001068 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e8e:	f000 f88b 	bl	8000fa8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e92:	f000 f8bf 	bl	8001014 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  myLoRa = newLoRa(&hspi1);
 8000e96:	4c0d      	ldr	r4, [pc, #52]	; (8000ecc <main+0x50>)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <main+0x54>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb75 	bl	800058c <newLoRa>
 8000ea2:	4625      	mov	r5, r4
 8000ea4:	463c      	mov	r4, r7
 8000ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000eb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa_start(&myLoRa, &huart1);
 8000eb6:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <main+0x58>)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <main+0x50>)
 8000eba:	f7ff ffb5 	bl	8000e28 <LoRa_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  transmit_test(&myLoRa);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <main+0x50>)
 8000ec0:	f7ff ff70 	bl	8000da4 <transmit_test>
	  HAL_Delay(200);
 8000ec4:	20c8      	movs	r0, #200	; 0xc8
 8000ec6:	f000 fc1d 	bl	8001704 <HAL_Delay>
	  transmit_test(&myLoRa);
 8000eca:	e7f8      	b.n	8000ebe <main+0x42>
 8000ecc:	20000120 	.word	0x20000120
 8000ed0:	20000084 	.word	0x20000084
 8000ed4:	200000dc 	.word	0x200000dc

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 ffb2 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <SystemClock_Config+0xc8>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <SystemClock_Config+0xc8>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <SystemClock_Config+0xc8>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <SystemClock_Config+0xcc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f4c:	2348      	movs	r3, #72	; 0x48
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fed7 	bl	8001d10 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f68:	f000 f972 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2102      	movs	r1, #2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f939 	bl	8002200 <HAL_RCC_ClockConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f94:	f000 f95c 	bl	8001250 <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_SPI1_Init+0x64>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_SPI1_Init+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_SPI1_Init+0x64>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_SPI1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_SPI1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_SPI1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_SPI1_Init+0x64>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_SPI1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_SPI1_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SPI1_Init+0x64>)
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_SPI1_Init+0x64>)
 8000ffa:	f001 fae1 	bl	80025c0 <HAL_SPI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001004:	f000 f924 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000084 	.word	0x20000084
 8001010:	40013000 	.word	0x40013000

08001014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART1_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001020:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800104c:	f002 f86e 	bl	800312c <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f8fb 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000dc 	.word	0x200000dc
 8001064:	40011000 	.word	0x40011000

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <MX_GPIO_Init+0x14c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <MX_GPIO_Init+0x14c>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <MX_GPIO_Init+0x14c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_GPIO_Init+0x14c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4830      	ldr	r0, [pc, #192]	; (80011b8 <MX_GPIO_Init+0x150>)
 80010f6:	f000 fdbf 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NNC_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2118      	movs	r1, #24
 80010fe:	482f      	ldr	r0, [pc, #188]	; (80011bc <MX_GPIO_Init+0x154>)
 8001100:	f000 fdba 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	482d      	ldr	r0, [pc, #180]	; (80011c0 <MX_GPIO_Init+0x158>)
 800110c:	f000 fdb4 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4823      	ldr	r0, [pc, #140]	; (80011b8 <MX_GPIO_Init+0x150>)
 800112a:	f000 fc21 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin NNC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NNC_Pin;
 800112e:	2318      	movs	r3, #24
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	481d      	ldr	r0, [pc, #116]	; (80011bc <MX_GPIO_Init+0x154>)
 8001146:	f000 fc13 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_GPIO_Init+0x158>)
 8001160:	f000 fc06 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <MX_GPIO_Init+0x154>)
 800117a:	f000 fbf9 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800117e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <MX_GPIO_Init+0x158>)
 8001198:	f000 fbea 	bl	8001970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2006      	movs	r0, #6
 80011a2:	f000 fbae 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011a6:	2006      	movs	r0, #6
 80011a8:	f000 fbc7 	bl	800193a <HAL_NVIC_EnableIRQ>

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400

080011c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b090      	sub	sp, #64	; 0x40
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin){
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d12c      	bne.n	800122e <HAL_GPIO_EXTI_Callback+0x6a>
		char num_of_mess[50];
		sprintf((char*)num_of_mess, "mess: %d", so_luong_message_nhan_duoc[0]++);
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_GPIO_EXTI_Callback+0x74>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	b2d1      	uxtb	r1, r2
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <HAL_GPIO_EXTI_Callback+0x74>)
 80011de:	7011      	strb	r1, [r2, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4915      	ldr	r1, [pc, #84]	; (800123c <HAL_GPIO_EXTI_Callback+0x78>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fd39 	bl	8003c60 <siprintf>
		receive_test(&myLoRa,&huart1, receive_data);
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011f0:	4914      	ldr	r1, [pc, #80]	; (8001244 <HAL_GPIO_EXTI_Callback+0x80>)
 80011f2:	4815      	ldr	r0, [pc, #84]	; (8001248 <HAL_GPIO_EXTI_Callback+0x84>)
 80011f4:	f7ff fe02 	bl	8000dfc <receive_test>
		if(so_luong_message_nhan_duoc[0]%10 == 0){
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_GPIO_EXTI_Callback+0x74>)
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_GPIO_EXTI_Callback+0x88>)
 80011fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001202:	08d9      	lsrs	r1, r3, #3
 8001204:	460b      	mov	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <HAL_GPIO_EXTI_Callback+0x6a>
			HAL_UART_Transmit(&huart1,receive_data, 10 , 100);
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	220a      	movs	r2, #10
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <HAL_GPIO_EXTI_Callback+0x7c>)
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <HAL_GPIO_EXTI_Callback+0x80>)
 800121c:	f001 ffd3 	bl	80031c6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)num_of_mess, 9 , 100);
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	2209      	movs	r2, #9
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <HAL_GPIO_EXTI_Callback+0x80>)
 800122a:	f001 ffcc 	bl	80031c6 <HAL_UART_Transmit>
		}
	}
}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000158 	.word	0x20000158
 800123c:	08004998 	.word	0x08004998
 8001240:	2000014c 	.word	0x2000014c
 8001244:	200000dc 	.word	0x200000dc
 8001248:	20000120 	.word	0x20000120
 800124c:	cccccccd 	.word	0xcccccccd

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_MspInit+0x4c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_SPI_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12b      	bne.n	8001326 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001306:	23e0      	movs	r3, #224	; 0xe0
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 8001322:	f000 fb25 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40013000 	.word	0x40013000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12c      	bne.n	80013b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_UART_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a8:	2307      	movs	r3, #7
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_UART_MspInit+0x8c>)
 80013b4:	f000 fadc 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f954 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001424:	2001      	movs	r0, #1
 8001426:	f000 fc5b 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}

0800142e <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001438:	f002 fd78 	bl	8003f2c <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	2216      	movs	r2, #22
 8001440:	601a      	str	r2, [r3, #0]
	return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_exit>:

void _exit (int status)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001456:	f04f 31ff 	mov.w	r1, #4294967295
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffe7 	bl	800142e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001460:	e7fe      	b.n	8001460 <_exit+0x12>

08001462 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e00a      	b.n	800148a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001474:	f3af 8000 	nop.w
 8001478:	4601      	mov	r1, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	b2ca      	uxtb	r2, r1
 8001482:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	dbf0      	blt.n	8001474 <_read+0x12>
	}

return len;
 8001492:	687b      	ldr	r3, [r7, #4]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e009      	b.n	80014c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbf1      	blt.n	80014ae <_write+0x12>
	}
	return len;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_close>:

int _close(int file)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
	return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_isatty>:

int _isatty(int file)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
	return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f002 fcde 	bl	8003f2c <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20020000 	.word	0x20020000
 800159c:	00000400 	.word	0x00000400
 80015a0:	2000015c 	.word	0x2000015c
 80015a4:	200002b0 	.word	0x200002b0

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f6:	f7ff ffd7 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f002 fc9d 	bl	8003f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fc3d 	bl	8000e7c <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001610:	08004a00 	.word	0x08004a00
  ldr r2, =_sbss
 8001614:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001618:	200002b0 	.word	0x200002b0

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f94f 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fe02 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f967 	bl	8001956 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f92f 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000160 	.word	0x20000160

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000160 	.word	0x20000160

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e159      	b.n	8001c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8148 	bne.w	8001c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d017      	beq.n	8001a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a2 	beq.w	8001c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a56      	ldr	r2, [pc, #344]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b12:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a49      	ldr	r2, [pc, #292]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x202>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_GPIO_Init+0x2f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x1fe>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <HAL_GPIO_Init+0x2f8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a46      	ldr	r2, [pc, #280]	; (8001c6c <HAL_GPIO_Init+0x2fc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x1f6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x1f2>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b62:	2307      	movs	r3, #7
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f aea2 	bls.w	800198c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40013c00 	.word	0x40013c00

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	400b      	ands	r3, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa60 	bl	80011c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40013c00 	.word	0x40013c00

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e267      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d075      	beq.n	8001e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d00c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d112      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d52:	d10b      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b7e      	ldr	r3, [pc, #504]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d05b      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d157      	bne.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e242      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x74>
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6f      	ldr	r2, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6c      	ldr	r2, [pc, #432]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001da8:	4b69      	ldr	r3, [pc, #420]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a68      	ldr	r2, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a65      	ldr	r2, [pc, #404]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fc90 	bl	80016ec <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fc8c 	bl	80016ec <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e207      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc7c 	bl	80016ec <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fc78 	bl	80016ec <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1f3      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1c7      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4937      	ldr	r1, [pc, #220]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCC_OscConfig+0x244>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff fc31 	bl	80016ec <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fc2d 	bl	80016ec <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1a8      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4925      	ldr	r1, [pc, #148]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_RCC_OscConfig+0x244>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fc10 	bl	80016ec <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fc0c 	bl	80016ec <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e187      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d036      	beq.n	8001f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_OscConfig+0x248>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff fbf0 	bl	80016ec <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fbec 	bl	80016ec <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e167      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x200>
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_OscConfig+0x248>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fbd9 	bl	80016ec <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e00e      	b.n	8001f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fbd5 	bl	80016ec <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d907      	bls.n	8001f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e150      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	42470000 	.word	0x42470000
 8001f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b88      	ldr	r3, [pc, #544]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ea      	bne.n	8001f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8097 	beq.w	80020a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b77      	ldr	r3, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b74      	ldr	r3, [pc, #464]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a73      	ldr	r2, [pc, #460]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fb95 	bl	80016ec <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff fb91 	bl	80016ec <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e10c      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2ea>
 8001fec:	4b64      	ldr	r3, [pc, #400]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a63      	ldr	r2, [pc, #396]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x324>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x30c>
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a5e      	ldr	r2, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
 800200e:	4b5c      	ldr	r3, [pc, #368]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a5b      	ldr	r2, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x324>
 800201c:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a54      	ldr	r2, [pc, #336]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800202e:	f023 0304 	bic.w	r3, r3, #4
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7ff fb56 	bl	80016ec <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff fb52 	bl	80016ec <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0cb      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0ee      	beq.n	8002044 <HAL_RCC_OscConfig+0x334>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7ff fb40 	bl	80016ec <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff fb3c 	bl	80016ec <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0b5      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ee      	bne.n	8002070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a1 	beq.w	80021f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d05c      	beq.n	8002174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d141      	bne.n	8002146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_OscConfig+0x478>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fb10 	bl	80016ec <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff fb0c 	bl	80016ec <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e087      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	491b      	ldr	r1, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x478>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fae5 	bl	80016ec <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff fae1 	bl	80016ec <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e05c      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x416>
 8002144:	e054      	b.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_RCC_OscConfig+0x478>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff face 	bl	80016ec <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff faca 	bl	80016ec <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e045      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x444>
 8002172:	e03d      	b.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e038      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
 8002188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x4ec>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d028      	beq.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11a      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0cc      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d90c      	bls.n	800223c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800225e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d044      	beq.n	8002320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d119      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e067      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4934      	ldr	r1, [pc, #208]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f0:	f7ff f9fc 	bl	80016ec <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7ff f9f8 	bl	80016ec <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e04f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d20c      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	490a      	ldr	r1, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f95c 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00
 80023bc:	40023800 	.word	0x40023800
 80023c0:	080049a4 	.word	0x080049a4
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b090      	sub	sp, #64	; 0x40
 80023d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
 80023d8:	2300      	movs	r3, #0
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_GetSysClockFreq+0x180>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d00d      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	f200 80a1 	bhi.w	8002538 <HAL_RCC_GetSysClockFreq+0x16c>
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x34>
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fe:	e09b      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_GetSysClockFreq+0x184>)
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002404:	e09b      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_GetSysClockFreq+0x188>)
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800240a:	e098      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_RCC_GetSysClockFreq+0x180>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_GetSysClockFreq+0x180>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d028      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_GetSysClockFreq+0x180>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	627a      	str	r2, [r7, #36]	; 0x24
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002434:	2100      	movs	r1, #0
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_GetSysClockFreq+0x188>)
 8002438:	fb03 f201 	mul.w	r2, r3, r1
 800243c:	2300      	movs	r3, #0
 800243e:	fb00 f303 	mul.w	r3, r0, r3
 8002442:	4413      	add	r3, r2
 8002444:	4a43      	ldr	r2, [pc, #268]	; (8002554 <HAL_RCC_GetSysClockFreq+0x188>)
 8002446:	fba0 1202 	umull	r1, r2, r0, r2
 800244a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800244c:	460a      	mov	r2, r1
 800244e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002452:	4413      	add	r3, r2
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002458:	2200      	movs	r2, #0
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	61fa      	str	r2, [r7, #28]
 800245e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002462:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002466:	f7fd ff13 	bl	8000290 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4613      	mov	r3, r2
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002472:	e053      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_GetSysClockFreq+0x180>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	2200      	movs	r2, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	617a      	str	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002486:	f04f 0b00 	mov.w	fp, #0
 800248a:	4652      	mov	r2, sl
 800248c:	465b      	mov	r3, fp
 800248e:	f04f 0000 	mov.w	r0, #0
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	0159      	lsls	r1, r3, #5
 8002498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800249c:	0150      	lsls	r0, r2, #5
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	ebb2 080a 	subs.w	r8, r2, sl
 80024a6:	eb63 090b 	sbc.w	r9, r3, fp
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024be:	ebb2 0408 	subs.w	r4, r2, r8
 80024c2:	eb63 0509 	sbc.w	r5, r3, r9
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	00eb      	lsls	r3, r5, #3
 80024d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024d4:	00e2      	lsls	r2, r4, #3
 80024d6:	4614      	mov	r4, r2
 80024d8:	461d      	mov	r5, r3
 80024da:	eb14 030a 	adds.w	r3, r4, sl
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	eb45 030b 	adc.w	r3, r5, fp
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024f2:	4629      	mov	r1, r5
 80024f4:	028b      	lsls	r3, r1, #10
 80024f6:	4621      	mov	r1, r4
 80024f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024fc:	4621      	mov	r1, r4
 80024fe:	028a      	lsls	r2, r1, #10
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	2200      	movs	r2, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	60fa      	str	r2, [r7, #12]
 800250c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002510:	f7fd febe 	bl	8000290 <__aeabi_uldivmod>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4613      	mov	r3, r2
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_GetSysClockFreq+0x180>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	3301      	adds	r3, #1
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800252c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002536:	e002      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetSysClockFreq+0x184>)
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800253c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002540:	4618      	mov	r0, r3
 8002542:	3740      	adds	r7, #64	; 0x40
 8002544:	46bd      	mov	sp, r7
 8002546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	00f42400 	.word	0x00f42400
 8002554:	017d7840 	.word	0x017d7840

08002558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_GetHCLKFreq+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002574:	f7ff fff0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a9b      	lsrs	r3, r3, #10
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	080049b4 	.word	0x080049b4

08002598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800259c:	f7ff ffdc 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0b5b      	lsrs	r3, r3, #13
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	080049b4 	.word	0x080049b4

080025c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07b      	b.n	80026ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e2:	d009      	beq.n	80025f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
 80025ea:	e005      	b.n	80025f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fe4a 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	ea42 0103 	orr.w	r1, r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0104 	and.w	r1, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f003 0210 	and.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b088      	sub	sp, #32
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_SPI_Transmit+0x22>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e126      	b.n	8002942 <HAL_SPI_Transmit+0x270>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026fc:	f7fe fff6 	bl	80016ec <HAL_GetTick>
 8002700:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002716:	e10b      	b.n	8002930 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_Transmit+0x52>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002728:	e102      	b.n	8002930 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	d10f      	bne.n	8002792 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d007      	beq.n	80027b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b8:	d14b      	bne.n	8002852 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_SPI_Transmit+0xf6>
 80027c2:	8afb      	ldrh	r3, [r7, #22]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d13e      	bne.n	8002846 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	1c9a      	adds	r2, r3, #2
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ec:	e02b      	b.n	8002846 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d112      	bne.n	8002822 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002820:	e011      	b.n	8002846 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002822:	f7fe ff63 	bl	80016ec <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d803      	bhi.n	800283a <HAL_SPI_Transmit+0x168>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d102      	bne.n	8002840 <HAL_SPI_Transmit+0x16e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002844:	e074      	b.n	8002930 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ce      	bne.n	80027ee <HAL_SPI_Transmit+0x11c>
 8002850:	e04c      	b.n	80028ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_SPI_Transmit+0x18e>
 800285a:	8afb      	ldrh	r3, [r7, #22]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d140      	bne.n	80028e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002886:	e02c      	b.n	80028e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d113      	bne.n	80028be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80028bc:	e011      	b.n	80028e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028be:	f7fe ff15 	bl	80016ec <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d803      	bhi.n	80028d6 <HAL_SPI_Transmit+0x204>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_Transmit+0x20a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028e0:	e026      	b.n	8002930 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1cd      	bne.n	8002888 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fbd9 	bl	80030a8 <SPI_EndRxTxTransaction>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e000      	b.n	8002930 <HAL_SPI_Transmit+0x25e>
  }

error:
 800292e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002940:	7ffb      	ldrb	r3, [r7, #31]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af02      	add	r7, sp, #8
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002966:	d112      	bne.n	800298e <HAL_SPI_Receive+0x44>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10e      	bne.n	800298e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2204      	movs	r2, #4
 8002974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f8f1 	bl	8002b6c <HAL_SPI_TransmitReceive>
 800298a:	4603      	mov	r3, r0
 800298c:	e0ea      	b.n	8002b64 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_SPI_Receive+0x52>
 8002998:	2302      	movs	r3, #2
 800299a:	e0e3      	b.n	8002b64 <HAL_SPI_Receive+0x21a>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a4:	f7fe fea2 	bl	80016ec <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
 80029b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029ba:	e0ca      	b.n	8002b52 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_Receive+0x7e>
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029cc:	e0c1      	b.n	8002b52 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2204      	movs	r2, #4
 80029d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	88fa      	ldrh	r2, [r7, #6]
 80029e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a14:	d10f      	bne.n	8002a36 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d007      	beq.n	8002a54 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d162      	bne.n	8002b22 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a5c:	e02e      	b.n	8002abc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d115      	bne.n	8002a98 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f103 020c 	add.w	r2, r3, #12
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a96:	e011      	b.n	8002abc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a98:	f7fe fe28 	bl	80016ec <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d803      	bhi.n	8002ab0 <HAL_SPI_Receive+0x166>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d102      	bne.n	8002ab6 <HAL_SPI_Receive+0x16c>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002aba:	e04a      	b.n	8002b52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1cb      	bne.n	8002a5e <HAL_SPI_Receive+0x114>
 8002ac6:	e031      	b.n	8002b2c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d113      	bne.n	8002afe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002afc:	e011      	b.n	8002b22 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002afe:	f7fe fdf5 	bl	80016ec <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d803      	bhi.n	8002b16 <HAL_SPI_Receive+0x1cc>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d102      	bne.n	8002b1c <HAL_SPI_Receive+0x1d2>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b20:	e017      	b.n	8002b52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1cd      	bne.n	8002ac8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fa53 	bl	8002fdc <SPI_EndRxTransaction>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
 8002b4e:	e000      	b.n	8002b52 <HAL_SPI_Receive+0x208>
  }

error :
 8002b50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x26>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e18a      	b.n	8002ea8 <HAL_SPI_TransmitReceive+0x33c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b9a:	f7fe fda7 	bl	80016ec <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d00f      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x70>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc2:	d107      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x68>
 8002bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d003      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bda:	e15b      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x82>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x82>
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bf4:	e14e      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d003      	beq.n	8002c0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	887a      	ldrh	r2, [r7, #2]
 8002c32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d007      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c66:	d178      	bne.n	8002d5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_TransmitReceive+0x10a>
 8002c70:	8b7b      	ldrh	r3, [r7, #26]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d166      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	1c9a      	adds	r2, r3, #2
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9a:	e053      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x176>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_SPI_TransmitReceive+0x176>
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d113      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	1c9a      	adds	r2, r3, #2
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x1b8>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d014      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	b292      	uxth	r2, r2
 8002d06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	1c9a      	adds	r2, r3, #2
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d24:	f7fe fce2 	bl	80016ec <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d807      	bhi.n	8002d44 <HAL_SPI_TransmitReceive+0x1d8>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d003      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d42:	e0a7      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1a6      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x130>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1a1      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x130>
 8002d58:	e07c      	b.n	8002e54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x1fc>
 8002d62:	8b7b      	ldrh	r3, [r7, #26]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d16b      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8e:	e057      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x26c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <HAL_SPI_TransmitReceive+0x26c>
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d114      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d119      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x2ae>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d014      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e16:	2301      	movs	r3, #1
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e1a:	f7fe fc67 	bl	80016ec <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d803      	bhi.n	8002e32 <HAL_SPI_TransmitReceive+0x2c6>
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x2cc>
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e3e:	e029      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1a2      	bne.n	8002d90 <HAL_SPI_TransmitReceive+0x224>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d19d      	bne.n	8002d90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f925 	bl	80030a8 <SPI_EndRxTxTransaction>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e70:	e010      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	e000      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ea4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3730      	adds	r7, #48	; 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ebe:	b2db      	uxtb	r3, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002edc:	f7fe fc06 	bl	80016ec <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eec:	f7fe fbfe 	bl	80016ec <HAL_GetTick>
 8002ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	015b      	lsls	r3, r3, #5
 8002ef8:	0d1b      	lsrs	r3, r3, #20
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f02:	e054      	b.n	8002fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d050      	beq.n	8002fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f0c:	f7fe fbee 	bl	80016ec <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d13d      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3a:	d111      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	d004      	beq.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4e:	d107      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	d10f      	bne.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e017      	b.n	8002fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d19b      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000000 	.word	0x20000000

08002fdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff0:	d111      	bne.n	8003016 <SPI_EndRxTransaction+0x3a>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffa:	d004      	beq.n	8003006 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003004:	d107      	bne.n	8003016 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800301e:	d12a      	bne.n	8003076 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	d012      	beq.n	8003050 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff ff49 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02d      	beq.n	800309c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e026      	b.n	800309e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	2101      	movs	r1, #1
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ff36 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e013      	b.n	800309e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	2101      	movs	r1, #1
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff ff23 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e000      	b.n	800309e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <SPI_EndRxTxTransaction+0x7c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1b      	ldr	r2, [pc, #108]	; (8003128 <SPI_EndRxTxTransaction+0x80>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0d5b      	lsrs	r3, r3, #21
 80030c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d2:	d112      	bne.n	80030fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff fef4 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e00f      	b.n	800311a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3b01      	subs	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d0f2      	beq.n	80030fa <SPI_EndRxTxTransaction+0x52>
 8003114:	e000      	b.n	8003118 <SPI_EndRxTxTransaction+0x70>
        break;
 8003116:	bf00      	nop
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000
 8003128:	165e9f81 	.word	0x165e9f81

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e03f      	b.n	80031be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f8f2 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f929 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	; 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d17c      	bne.n	80032e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_Transmit+0x2c>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e075      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Transmit+0x3e>
 8003200:	2302      	movs	r3, #2
 8003202:	e06e      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321a:	f7fe fa67 	bl	80016ec <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003234:	d108      	bne.n	8003248 <HAL_UART_Transmit+0x82>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003258:	e02a      	b.n	80032b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f840 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e036      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3302      	adds	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e007      	b.n	80032a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1cf      	bne.n	800325a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	; 0x40
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f810 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e006      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b090      	sub	sp, #64	; 0x40
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e050      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d04c      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	f7fe f9ef 	bl	80016ec <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	429a      	cmp	r2, r3
 8003318:	d241      	bcs.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333a:	637a      	str	r2, [r7, #52]	; 0x34
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	613b      	str	r3, [r7, #16]
   return(result);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336e:	623a      	str	r2, [r7, #32]
 8003370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	61bb      	str	r3, [r7, #24]
   return(result);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d09f      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3740      	adds	r7, #64	; 0x40
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	; 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7ff f896 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7ff f87d 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	; 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	; 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800350c:	f7fc fec0 	bl	8000290 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	; 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035a2:	f7fc fe75 	bl	8000290 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	; 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800365e:	f7fc fe17 	bl	8000290 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e106      	b.n	80038a0 <UART_SetConfig+0x4d8>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003720:	f7fc fdb6 	bl	8000290 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	; (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	; 0x78
 800379e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037be:	f7fc fd67 	bl	8000290 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4b38      	ldr	r3, [pc, #224]	; (80038ac <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2264      	movs	r2, #100	; 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	; 0x32
 80037dc:	4a33      	ldr	r2, [pc, #204]	; (80038ac <UART_SetConfig+0x4e4>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
 80037f2:	677a      	str	r2, [r7, #116]	; 0x74
 80037f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	415b      	adcs	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	4641      	mov	r1, r8
 800380a:	1851      	adds	r1, r2, r1
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	4649      	mov	r1, r9
 8003810:	414b      	adcs	r3, r1
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003820:	4659      	mov	r1, fp
 8003822:	00cb      	lsls	r3, r1, #3
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382a:	4651      	mov	r1, sl
 800382c:	00ca      	lsls	r2, r1, #3
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	4603      	mov	r3, r0
 8003834:	4642      	mov	r2, r8
 8003836:	189b      	adds	r3, r3, r2
 8003838:	66bb      	str	r3, [r7, #104]	; 0x68
 800383a:	464b      	mov	r3, r9
 800383c:	460a      	mov	r2, r1
 800383e:	eb42 0303 	adc.w	r3, r2, r3
 8003842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	663b      	str	r3, [r7, #96]	; 0x60
 800384e:	667a      	str	r2, [r7, #100]	; 0x64
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800385c:	4649      	mov	r1, r9
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003866:	4641      	mov	r1, r8
 8003868:	008a      	lsls	r2, r1, #2
 800386a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800386e:	f7fc fd0f 	bl	8000290 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <UART_SetConfig+0x4e4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	; 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <UART_SetConfig+0x4e4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4422      	add	r2, r4
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <exit>:
 80038b0:	b508      	push	{r3, lr}
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <exit+0x1c>)
 80038b4:	4604      	mov	r4, r0
 80038b6:	b113      	cbz	r3, 80038be <exit+0xe>
 80038b8:	2100      	movs	r1, #0
 80038ba:	f3af 8000 	nop.w
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <exit+0x20>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <exit+0x16>
 80038c4:	4798      	blx	r3
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fd fdc1 	bl	800144e <_exit>
 80038cc:	00000000 	.word	0x00000000
 80038d0:	200002a4 	.word	0x200002a4

080038d4 <malloc>:
 80038d4:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <malloc+0xc>)
 80038d6:	4601      	mov	r1, r0
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	f000 b82b 	b.w	8003934 <_malloc_r>
 80038de:	bf00      	nop
 80038e0:	20000064 	.word	0x20000064

080038e4 <free>:
 80038e4:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <free+0xc>)
 80038e6:	4601      	mov	r1, r0
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	f000 bb53 	b.w	8003f94 <_free_r>
 80038ee:	bf00      	nop
 80038f0:	20000064 	.word	0x20000064

080038f4 <sbrk_aligned>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	4e0e      	ldr	r6, [pc, #56]	; (8003930 <sbrk_aligned+0x3c>)
 80038f8:	460c      	mov	r4, r1
 80038fa:	6831      	ldr	r1, [r6, #0]
 80038fc:	4605      	mov	r5, r0
 80038fe:	b911      	cbnz	r1, 8003906 <sbrk_aligned+0x12>
 8003900:	f000 faf2 	bl	8003ee8 <_sbrk_r>
 8003904:	6030      	str	r0, [r6, #0]
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 faed 	bl	8003ee8 <_sbrk_r>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	d00a      	beq.n	8003928 <sbrk_aligned+0x34>
 8003912:	1cc4      	adds	r4, r0, #3
 8003914:	f024 0403 	bic.w	r4, r4, #3
 8003918:	42a0      	cmp	r0, r4
 800391a:	d007      	beq.n	800392c <sbrk_aligned+0x38>
 800391c:	1a21      	subs	r1, r4, r0
 800391e:	4628      	mov	r0, r5
 8003920:	f000 fae2 	bl	8003ee8 <_sbrk_r>
 8003924:	3001      	adds	r0, #1
 8003926:	d101      	bne.n	800392c <sbrk_aligned+0x38>
 8003928:	f04f 34ff 	mov.w	r4, #4294967295
 800392c:	4620      	mov	r0, r4
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	20000168 	.word	0x20000168

08003934 <_malloc_r>:
 8003934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003938:	1ccd      	adds	r5, r1, #3
 800393a:	f025 0503 	bic.w	r5, r5, #3
 800393e:	3508      	adds	r5, #8
 8003940:	2d0c      	cmp	r5, #12
 8003942:	bf38      	it	cc
 8003944:	250c      	movcc	r5, #12
 8003946:	2d00      	cmp	r5, #0
 8003948:	4607      	mov	r7, r0
 800394a:	db01      	blt.n	8003950 <_malloc_r+0x1c>
 800394c:	42a9      	cmp	r1, r5
 800394e:	d905      	bls.n	800395c <_malloc_r+0x28>
 8003950:	230c      	movs	r3, #12
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	2600      	movs	r6, #0
 8003956:	4630      	mov	r0, r6
 8003958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800395c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a30 <_malloc_r+0xfc>
 8003960:	f000 f868 	bl	8003a34 <__malloc_lock>
 8003964:	f8d8 3000 	ldr.w	r3, [r8]
 8003968:	461c      	mov	r4, r3
 800396a:	bb5c      	cbnz	r4, 80039c4 <_malloc_r+0x90>
 800396c:	4629      	mov	r1, r5
 800396e:	4638      	mov	r0, r7
 8003970:	f7ff ffc0 	bl	80038f4 <sbrk_aligned>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	4604      	mov	r4, r0
 8003978:	d155      	bne.n	8003a26 <_malloc_r+0xf2>
 800397a:	f8d8 4000 	ldr.w	r4, [r8]
 800397e:	4626      	mov	r6, r4
 8003980:	2e00      	cmp	r6, #0
 8003982:	d145      	bne.n	8003a10 <_malloc_r+0xdc>
 8003984:	2c00      	cmp	r4, #0
 8003986:	d048      	beq.n	8003a1a <_malloc_r+0xe6>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	4631      	mov	r1, r6
 800398c:	4638      	mov	r0, r7
 800398e:	eb04 0903 	add.w	r9, r4, r3
 8003992:	f000 faa9 	bl	8003ee8 <_sbrk_r>
 8003996:	4581      	cmp	r9, r0
 8003998:	d13f      	bne.n	8003a1a <_malloc_r+0xe6>
 800399a:	6821      	ldr	r1, [r4, #0]
 800399c:	1a6d      	subs	r5, r5, r1
 800399e:	4629      	mov	r1, r5
 80039a0:	4638      	mov	r0, r7
 80039a2:	f7ff ffa7 	bl	80038f4 <sbrk_aligned>
 80039a6:	3001      	adds	r0, #1
 80039a8:	d037      	beq.n	8003a1a <_malloc_r+0xe6>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	442b      	add	r3, r5
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	f8d8 3000 	ldr.w	r3, [r8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d038      	beq.n	8003a2a <_malloc_r+0xf6>
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	42a2      	cmp	r2, r4
 80039bc:	d12b      	bne.n	8003a16 <_malloc_r+0xe2>
 80039be:	2200      	movs	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	e00f      	b.n	80039e4 <_malloc_r+0xb0>
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	1b52      	subs	r2, r2, r5
 80039c8:	d41f      	bmi.n	8003a0a <_malloc_r+0xd6>
 80039ca:	2a0b      	cmp	r2, #11
 80039cc:	d917      	bls.n	80039fe <_malloc_r+0xca>
 80039ce:	1961      	adds	r1, r4, r5
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	6025      	str	r5, [r4, #0]
 80039d4:	bf18      	it	ne
 80039d6:	6059      	strne	r1, [r3, #4]
 80039d8:	6863      	ldr	r3, [r4, #4]
 80039da:	bf08      	it	eq
 80039dc:	f8c8 1000 	streq.w	r1, [r8]
 80039e0:	5162      	str	r2, [r4, r5]
 80039e2:	604b      	str	r3, [r1, #4]
 80039e4:	4638      	mov	r0, r7
 80039e6:	f104 060b 	add.w	r6, r4, #11
 80039ea:	f000 f829 	bl	8003a40 <__malloc_unlock>
 80039ee:	f026 0607 	bic.w	r6, r6, #7
 80039f2:	1d23      	adds	r3, r4, #4
 80039f4:	1af2      	subs	r2, r6, r3
 80039f6:	d0ae      	beq.n	8003956 <_malloc_r+0x22>
 80039f8:	1b9b      	subs	r3, r3, r6
 80039fa:	50a3      	str	r3, [r4, r2]
 80039fc:	e7ab      	b.n	8003956 <_malloc_r+0x22>
 80039fe:	42a3      	cmp	r3, r4
 8003a00:	6862      	ldr	r2, [r4, #4]
 8003a02:	d1dd      	bne.n	80039c0 <_malloc_r+0x8c>
 8003a04:	f8c8 2000 	str.w	r2, [r8]
 8003a08:	e7ec      	b.n	80039e4 <_malloc_r+0xb0>
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	6864      	ldr	r4, [r4, #4]
 8003a0e:	e7ac      	b.n	800396a <_malloc_r+0x36>
 8003a10:	4634      	mov	r4, r6
 8003a12:	6876      	ldr	r6, [r6, #4]
 8003a14:	e7b4      	b.n	8003980 <_malloc_r+0x4c>
 8003a16:	4613      	mov	r3, r2
 8003a18:	e7cc      	b.n	80039b4 <_malloc_r+0x80>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4638      	mov	r0, r7
 8003a20:	f000 f80e 	bl	8003a40 <__malloc_unlock>
 8003a24:	e797      	b.n	8003956 <_malloc_r+0x22>
 8003a26:	6025      	str	r5, [r4, #0]
 8003a28:	e7dc      	b.n	80039e4 <_malloc_r+0xb0>
 8003a2a:	605b      	str	r3, [r3, #4]
 8003a2c:	deff      	udf	#255	; 0xff
 8003a2e:	bf00      	nop
 8003a30:	20000164 	.word	0x20000164

08003a34 <__malloc_lock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__malloc_lock+0x8>)
 8003a36:	f000 baa3 	b.w	8003f80 <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	200002ac 	.word	0x200002ac

08003a40 <__malloc_unlock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__malloc_unlock+0x8>)
 8003a42:	f000 ba9e 	b.w	8003f82 <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	200002ac 	.word	0x200002ac

08003a4c <std>:
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	4604      	mov	r4, r0
 8003a52:	e9c0 3300 	strd	r3, r3, [r0]
 8003a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a5a:	6083      	str	r3, [r0, #8]
 8003a5c:	8181      	strh	r1, [r0, #12]
 8003a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a60:	81c2      	strh	r2, [r0, #14]
 8003a62:	6183      	str	r3, [r0, #24]
 8003a64:	4619      	mov	r1, r3
 8003a66:	2208      	movs	r2, #8
 8003a68:	305c      	adds	r0, #92	; 0x5c
 8003a6a:	f000 f9f1 	bl	8003e50 <memset>
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <std+0x38>)
 8003a70:	6263      	str	r3, [r4, #36]	; 0x24
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <std+0x3c>)
 8003a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <std+0x40>)
 8003a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <std+0x44>)
 8003a7c:	6224      	str	r4, [r4, #32]
 8003a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	bf00      	nop
 8003a84:	08003ca1 	.word	0x08003ca1
 8003a88:	08003cc3 	.word	0x08003cc3
 8003a8c:	08003cfb 	.word	0x08003cfb
 8003a90:	08003d1f 	.word	0x08003d1f

08003a94 <stdio_exit_handler>:
 8003a94:	4a02      	ldr	r2, [pc, #8]	; (8003aa0 <stdio_exit_handler+0xc>)
 8003a96:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <stdio_exit_handler+0x10>)
 8003a98:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <stdio_exit_handler+0x14>)
 8003a9a:	f000 b869 	b.w	8003b70 <_fwalk_sglue>
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c
 8003aa4:	08004709 	.word	0x08004709
 8003aa8:	20000018 	.word	0x20000018

08003aac <cleanup_stdio>:
 8003aac:	6841      	ldr	r1, [r0, #4]
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <cleanup_stdio+0x34>)
 8003ab0:	4299      	cmp	r1, r3
 8003ab2:	b510      	push	{r4, lr}
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	d001      	beq.n	8003abc <cleanup_stdio+0x10>
 8003ab8:	f000 fe26 	bl	8004708 <_fflush_r>
 8003abc:	68a1      	ldr	r1, [r4, #8]
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <cleanup_stdio+0x38>)
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	d002      	beq.n	8003aca <cleanup_stdio+0x1e>
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f000 fe1f 	bl	8004708 <_fflush_r>
 8003aca:	68e1      	ldr	r1, [r4, #12]
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <cleanup_stdio+0x3c>)
 8003ace:	4299      	cmp	r1, r3
 8003ad0:	d004      	beq.n	8003adc <cleanup_stdio+0x30>
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad8:	f000 be16 	b.w	8004708 <_fflush_r>
 8003adc:	bd10      	pop	{r4, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000016c 	.word	0x2000016c
 8003ae4:	200001d4 	.word	0x200001d4
 8003ae8:	2000023c 	.word	0x2000023c

08003aec <global_stdio_init.part.0>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <global_stdio_init.part.0+0x30>)
 8003af0:	4c0b      	ldr	r4, [pc, #44]	; (8003b20 <global_stdio_init.part.0+0x34>)
 8003af2:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <global_stdio_init.part.0+0x38>)
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	4620      	mov	r0, r4
 8003af8:	2200      	movs	r2, #0
 8003afa:	2104      	movs	r1, #4
 8003afc:	f7ff ffa6 	bl	8003a4c <std>
 8003b00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b04:	2201      	movs	r2, #1
 8003b06:	2109      	movs	r1, #9
 8003b08:	f7ff ffa0 	bl	8003a4c <std>
 8003b0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b10:	2202      	movs	r2, #2
 8003b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b16:	2112      	movs	r1, #18
 8003b18:	f7ff bf98 	b.w	8003a4c <std>
 8003b1c:	200002a4 	.word	0x200002a4
 8003b20:	2000016c 	.word	0x2000016c
 8003b24:	08003a95 	.word	0x08003a95

08003b28 <__sfp_lock_acquire>:
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <__sfp_lock_acquire+0x8>)
 8003b2a:	f000 ba29 	b.w	8003f80 <__retarget_lock_acquire_recursive>
 8003b2e:	bf00      	nop
 8003b30:	200002ad 	.word	0x200002ad

08003b34 <__sfp_lock_release>:
 8003b34:	4801      	ldr	r0, [pc, #4]	; (8003b3c <__sfp_lock_release+0x8>)
 8003b36:	f000 ba24 	b.w	8003f82 <__retarget_lock_release_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	200002ad 	.word	0x200002ad

08003b40 <__sinit>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	4604      	mov	r4, r0
 8003b44:	f7ff fff0 	bl	8003b28 <__sfp_lock_acquire>
 8003b48:	6a23      	ldr	r3, [r4, #32]
 8003b4a:	b11b      	cbz	r3, 8003b54 <__sinit+0x14>
 8003b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b50:	f7ff bff0 	b.w	8003b34 <__sfp_lock_release>
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <__sinit+0x28>)
 8003b56:	6223      	str	r3, [r4, #32]
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <__sinit+0x2c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f5      	bne.n	8003b4c <__sinit+0xc>
 8003b60:	f7ff ffc4 	bl	8003aec <global_stdio_init.part.0>
 8003b64:	e7f2      	b.n	8003b4c <__sinit+0xc>
 8003b66:	bf00      	nop
 8003b68:	08003aad 	.word	0x08003aad
 8003b6c:	200002a4 	.word	0x200002a4

08003b70 <_fwalk_sglue>:
 8003b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b74:	4607      	mov	r7, r0
 8003b76:	4688      	mov	r8, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b80:	f1b9 0901 	subs.w	r9, r9, #1
 8003b84:	d505      	bpl.n	8003b92 <_fwalk_sglue+0x22>
 8003b86:	6824      	ldr	r4, [r4, #0]
 8003b88:	2c00      	cmp	r4, #0
 8003b8a:	d1f7      	bne.n	8003b7c <_fwalk_sglue+0xc>
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b92:	89ab      	ldrh	r3, [r5, #12]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d907      	bls.n	8003ba8 <_fwalk_sglue+0x38>
 8003b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	d003      	beq.n	8003ba8 <_fwalk_sglue+0x38>
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c0      	blx	r8
 8003ba6:	4306      	orrs	r6, r0
 8003ba8:	3568      	adds	r5, #104	; 0x68
 8003baa:	e7e9      	b.n	8003b80 <_fwalk_sglue+0x10>

08003bac <_fwrite_r>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	9c08      	ldr	r4, [sp, #32]
 8003bb2:	468a      	mov	sl, r1
 8003bb4:	4690      	mov	r8, r2
 8003bb6:	fb02 f903 	mul.w	r9, r2, r3
 8003bba:	4606      	mov	r6, r0
 8003bbc:	b118      	cbz	r0, 8003bc6 <_fwrite_r+0x1a>
 8003bbe:	6a03      	ldr	r3, [r0, #32]
 8003bc0:	b90b      	cbnz	r3, 8003bc6 <_fwrite_r+0x1a>
 8003bc2:	f7ff ffbd 	bl	8003b40 <__sinit>
 8003bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bc8:	07dd      	lsls	r5, r3, #31
 8003bca:	d405      	bmi.n	8003bd8 <_fwrite_r+0x2c>
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	0598      	lsls	r0, r3, #22
 8003bd0:	d402      	bmi.n	8003bd8 <_fwrite_r+0x2c>
 8003bd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd4:	f000 f9d4 	bl	8003f80 <__retarget_lock_acquire_recursive>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	0719      	lsls	r1, r3, #28
 8003bdc:	d516      	bpl.n	8003c0c <_fwrite_r+0x60>
 8003bde:	6923      	ldr	r3, [r4, #16]
 8003be0:	b1a3      	cbz	r3, 8003c0c <_fwrite_r+0x60>
 8003be2:	2500      	movs	r5, #0
 8003be4:	454d      	cmp	r5, r9
 8003be6:	d01f      	beq.n	8003c28 <_fwrite_r+0x7c>
 8003be8:	68a7      	ldr	r7, [r4, #8]
 8003bea:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8003bee:	3f01      	subs	r7, #1
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	60a7      	str	r7, [r4, #8]
 8003bf4:	da04      	bge.n	8003c00 <_fwrite_r+0x54>
 8003bf6:	69a3      	ldr	r3, [r4, #24]
 8003bf8:	429f      	cmp	r7, r3
 8003bfa:	db0f      	blt.n	8003c1c <_fwrite_r+0x70>
 8003bfc:	290a      	cmp	r1, #10
 8003bfe:	d00d      	beq.n	8003c1c <_fwrite_r+0x70>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	6022      	str	r2, [r4, #0]
 8003c06:	7019      	strb	r1, [r3, #0]
 8003c08:	3501      	adds	r5, #1
 8003c0a:	e7eb      	b.n	8003be4 <_fwrite_r+0x38>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f000 f8c6 	bl	8003da0 <__swsetup_r>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d0e4      	beq.n	8003be2 <_fwrite_r+0x36>
 8003c18:	2500      	movs	r5, #0
 8003c1a:	e005      	b.n	8003c28 <_fwrite_r+0x7c>
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f000 f881 	bl	8003d26 <__swbuf_r>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d1ef      	bne.n	8003c08 <_fwrite_r+0x5c>
 8003c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c2a:	07da      	lsls	r2, r3, #31
 8003c2c:	d405      	bmi.n	8003c3a <_fwrite_r+0x8e>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	059b      	lsls	r3, r3, #22
 8003c32:	d402      	bmi.n	8003c3a <_fwrite_r+0x8e>
 8003c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c36:	f000 f9a4 	bl	8003f82 <__retarget_lock_release_recursive>
 8003c3a:	fbb5 f0f8 	udiv	r0, r5, r8
 8003c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003c44 <fwrite>:
 8003c44:	b507      	push	{r0, r1, r2, lr}
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	4803      	ldr	r0, [pc, #12]	; (8003c5c <fwrite+0x18>)
 8003c50:	6800      	ldr	r0, [r0, #0]
 8003c52:	f7ff ffab 	bl	8003bac <_fwrite_r>
 8003c56:	b003      	add	sp, #12
 8003c58:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c5c:	20000064 	.word	0x20000064

08003c60 <siprintf>:
 8003c60:	b40e      	push	{r1, r2, r3}
 8003c62:	b500      	push	{lr}
 8003c64:	b09c      	sub	sp, #112	; 0x70
 8003c66:	ab1d      	add	r3, sp, #116	; 0x74
 8003c68:	9002      	str	r0, [sp, #8]
 8003c6a:	9006      	str	r0, [sp, #24]
 8003c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c70:	4809      	ldr	r0, [pc, #36]	; (8003c98 <siprintf+0x38>)
 8003c72:	9107      	str	r1, [sp, #28]
 8003c74:	9104      	str	r1, [sp, #16]
 8003c76:	4909      	ldr	r1, [pc, #36]	; (8003c9c <siprintf+0x3c>)
 8003c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c7c:	9105      	str	r1, [sp, #20]
 8003c7e:	6800      	ldr	r0, [r0, #0]
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	a902      	add	r1, sp, #8
 8003c84:	f000 fa2c 	bl	80040e0 <_svfiprintf_r>
 8003c88:	9b02      	ldr	r3, [sp, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	b01c      	add	sp, #112	; 0x70
 8003c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c94:	b003      	add	sp, #12
 8003c96:	4770      	bx	lr
 8003c98:	20000064 	.word	0x20000064
 8003c9c:	ffff0208 	.word	0xffff0208

08003ca0 <__sread>:
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca8:	f000 f90c 	bl	8003ec4 <_read_r>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	bfab      	itete	ge
 8003cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb4:	181b      	addge	r3, r3, r0
 8003cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cba:	bfac      	ite	ge
 8003cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cbe:	81a3      	strhlt	r3, [r4, #12]
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <__swrite>:
 8003cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc6:	461f      	mov	r7, r3
 8003cc8:	898b      	ldrh	r3, [r1, #12]
 8003cca:	05db      	lsls	r3, r3, #23
 8003ccc:	4605      	mov	r5, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	d505      	bpl.n	8003ce0 <__swrite+0x1e>
 8003cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f000 f8e0 	bl	8003ea0 <_lseek_r>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cea:	81a3      	strh	r3, [r4, #12]
 8003cec:	4632      	mov	r2, r6
 8003cee:	463b      	mov	r3, r7
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf6:	f000 b907 	b.w	8003f08 <_write_r>

08003cfa <__sseek>:
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d02:	f000 f8cd 	bl	8003ea0 <_lseek_r>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	bf15      	itete	ne
 8003d0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d16:	81a3      	strheq	r3, [r4, #12]
 8003d18:	bf18      	it	ne
 8003d1a:	81a3      	strhne	r3, [r4, #12]
 8003d1c:	bd10      	pop	{r4, pc}

08003d1e <__sclose>:
 8003d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d22:	f000 b8ad 	b.w	8003e80 <_close_r>

08003d26 <__swbuf_r>:
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	460e      	mov	r6, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	b118      	cbz	r0, 8003d38 <__swbuf_r+0x12>
 8003d30:	6a03      	ldr	r3, [r0, #32]
 8003d32:	b90b      	cbnz	r3, 8003d38 <__swbuf_r+0x12>
 8003d34:	f7ff ff04 	bl	8003b40 <__sinit>
 8003d38:	69a3      	ldr	r3, [r4, #24]
 8003d3a:	60a3      	str	r3, [r4, #8]
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	071a      	lsls	r2, r3, #28
 8003d40:	d525      	bpl.n	8003d8e <__swbuf_r+0x68>
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	b31b      	cbz	r3, 8003d8e <__swbuf_r+0x68>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	1a98      	subs	r0, r3, r2
 8003d4c:	6963      	ldr	r3, [r4, #20]
 8003d4e:	b2f6      	uxtb	r6, r6
 8003d50:	4283      	cmp	r3, r0
 8003d52:	4637      	mov	r7, r6
 8003d54:	dc04      	bgt.n	8003d60 <__swbuf_r+0x3a>
 8003d56:	4621      	mov	r1, r4
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 fcd5 	bl	8004708 <_fflush_r>
 8003d5e:	b9e0      	cbnz	r0, 8003d9a <__swbuf_r+0x74>
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	60a3      	str	r3, [r4, #8]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	6022      	str	r2, [r4, #0]
 8003d6c:	701e      	strb	r6, [r3, #0]
 8003d6e:	6962      	ldr	r2, [r4, #20]
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d004      	beq.n	8003d80 <__swbuf_r+0x5a>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	07db      	lsls	r3, r3, #31
 8003d7a:	d506      	bpl.n	8003d8a <__swbuf_r+0x64>
 8003d7c:	2e0a      	cmp	r6, #10
 8003d7e:	d104      	bne.n	8003d8a <__swbuf_r+0x64>
 8003d80:	4621      	mov	r1, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 fcc0 	bl	8004708 <_fflush_r>
 8003d88:	b938      	cbnz	r0, 8003d9a <__swbuf_r+0x74>
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f805 	bl	8003da0 <__swsetup_r>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d0d5      	beq.n	8003d46 <__swbuf_r+0x20>
 8003d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9e:	e7f4      	b.n	8003d8a <__swbuf_r+0x64>

08003da0 <__swsetup_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <__swsetup_r+0xac>)
 8003da4:	4605      	mov	r5, r0
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	460c      	mov	r4, r1
 8003daa:	b118      	cbz	r0, 8003db4 <__swsetup_r+0x14>
 8003dac:	6a03      	ldr	r3, [r0, #32]
 8003dae:	b90b      	cbnz	r3, 8003db4 <__swsetup_r+0x14>
 8003db0:	f7ff fec6 	bl	8003b40 <__sinit>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dba:	0718      	lsls	r0, r3, #28
 8003dbc:	d422      	bmi.n	8003e04 <__swsetup_r+0x64>
 8003dbe:	06d9      	lsls	r1, r3, #27
 8003dc0:	d407      	bmi.n	8003dd2 <__swsetup_r+0x32>
 8003dc2:	2309      	movs	r3, #9
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	e034      	b.n	8003e3c <__swsetup_r+0x9c>
 8003dd2:	0758      	lsls	r0, r3, #29
 8003dd4:	d512      	bpl.n	8003dfc <__swsetup_r+0x5c>
 8003dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dd8:	b141      	cbz	r1, 8003dec <__swsetup_r+0x4c>
 8003dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dde:	4299      	cmp	r1, r3
 8003de0:	d002      	beq.n	8003de8 <__swsetup_r+0x48>
 8003de2:	4628      	mov	r0, r5
 8003de4:	f000 f8d6 	bl	8003f94 <_free_r>
 8003de8:	2300      	movs	r3, #0
 8003dea:	6363      	str	r3, [r4, #52]	; 0x34
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	2300      	movs	r3, #0
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	6923      	ldr	r3, [r4, #16]
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f043 0308 	orr.w	r3, r3, #8
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	b94b      	cbnz	r3, 8003e1c <__swsetup_r+0x7c>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e12:	d003      	beq.n	8003e1c <__swsetup_r+0x7c>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 fcc4 	bl	80047a4 <__smakebuf_r>
 8003e1c:	89a0      	ldrh	r0, [r4, #12]
 8003e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e22:	f010 0301 	ands.w	r3, r0, #1
 8003e26:	d00a      	beq.n	8003e3e <__swsetup_r+0x9e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60a3      	str	r3, [r4, #8]
 8003e2c:	6963      	ldr	r3, [r4, #20]
 8003e2e:	425b      	negs	r3, r3
 8003e30:	61a3      	str	r3, [r4, #24]
 8003e32:	6923      	ldr	r3, [r4, #16]
 8003e34:	b943      	cbnz	r3, 8003e48 <__swsetup_r+0xa8>
 8003e36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e3a:	d1c4      	bne.n	8003dc6 <__swsetup_r+0x26>
 8003e3c:	bd38      	pop	{r3, r4, r5, pc}
 8003e3e:	0781      	lsls	r1, r0, #30
 8003e40:	bf58      	it	pl
 8003e42:	6963      	ldrpl	r3, [r4, #20]
 8003e44:	60a3      	str	r3, [r4, #8]
 8003e46:	e7f4      	b.n	8003e32 <__swsetup_r+0x92>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e7f7      	b.n	8003e3c <__swsetup_r+0x9c>
 8003e4c:	20000064 	.word	0x20000064

08003e50 <memset>:
 8003e50:	4402      	add	r2, r0
 8003e52:	4603      	mov	r3, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <strcat>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	4602      	mov	r2, r0
 8003e64:	7814      	ldrb	r4, [r2, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	3201      	adds	r2, #1
 8003e6a:	2c00      	cmp	r4, #0
 8003e6c:	d1fa      	bne.n	8003e64 <strcat+0x4>
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d1f9      	bne.n	8003e70 <strcat+0x10>
 8003e7c:	bd10      	pop	{r4, pc}
	...

08003e80 <_close_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d06      	ldr	r5, [pc, #24]	; (8003e9c <_close_r+0x1c>)
 8003e84:	2300      	movs	r3, #0
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	f7fd fb22 	bl	80014d4 <_close>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_close_r+0x1a>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_close_r+0x1a>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	200002a8 	.word	0x200002a8

08003ea0 <_lseek_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d07      	ldr	r5, [pc, #28]	; (8003ec0 <_lseek_r+0x20>)
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7fd fb37 	bl	8001522 <_lseek>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_lseek_r+0x1e>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_lseek_r+0x1e>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	200002a8 	.word	0x200002a8

08003ec4 <_read_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d07      	ldr	r5, [pc, #28]	; (8003ee4 <_read_r+0x20>)
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fd fac5 	bl	8001462 <_read>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_read_r+0x1e>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_read_r+0x1e>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200002a8 	.word	0x200002a8

08003ee8 <_sbrk_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4d06      	ldr	r5, [pc, #24]	; (8003f04 <_sbrk_r+0x1c>)
 8003eec:	2300      	movs	r3, #0
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	f7fd fb22 	bl	800153c <_sbrk>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_sbrk_r+0x1a>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_sbrk_r+0x1a>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	200002a8 	.word	0x200002a8

08003f08 <_write_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4d07      	ldr	r5, [pc, #28]	; (8003f28 <_write_r+0x20>)
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4608      	mov	r0, r1
 8003f10:	4611      	mov	r1, r2
 8003f12:	2200      	movs	r2, #0
 8003f14:	602a      	str	r2, [r5, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f7fd fac0 	bl	800149c <_write>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_write_r+0x1e>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_write_r+0x1e>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	200002a8 	.word	0x200002a8

08003f2c <__errno>:
 8003f2c:	4b01      	ldr	r3, [pc, #4]	; (8003f34 <__errno+0x8>)
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000064 	.word	0x20000064

08003f38 <__libc_init_array>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4d0d      	ldr	r5, [pc, #52]	; (8003f70 <__libc_init_array+0x38>)
 8003f3c:	4c0d      	ldr	r4, [pc, #52]	; (8003f74 <__libc_init_array+0x3c>)
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	2600      	movs	r6, #0
 8003f44:	42a6      	cmp	r6, r4
 8003f46:	d109      	bne.n	8003f5c <__libc_init_array+0x24>
 8003f48:	4d0b      	ldr	r5, [pc, #44]	; (8003f78 <__libc_init_array+0x40>)
 8003f4a:	4c0c      	ldr	r4, [pc, #48]	; (8003f7c <__libc_init_array+0x44>)
 8003f4c:	f000 fce8 	bl	8004920 <_init>
 8003f50:	1b64      	subs	r4, r4, r5
 8003f52:	10a4      	asrs	r4, r4, #2
 8003f54:	2600      	movs	r6, #0
 8003f56:	42a6      	cmp	r6, r4
 8003f58:	d105      	bne.n	8003f66 <__libc_init_array+0x2e>
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f60:	4798      	blx	r3
 8003f62:	3601      	adds	r6, #1
 8003f64:	e7ee      	b.n	8003f44 <__libc_init_array+0xc>
 8003f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6a:	4798      	blx	r3
 8003f6c:	3601      	adds	r6, #1
 8003f6e:	e7f2      	b.n	8003f56 <__libc_init_array+0x1e>
 8003f70:	080049f8 	.word	0x080049f8
 8003f74:	080049f8 	.word	0x080049f8
 8003f78:	080049f8 	.word	0x080049f8
 8003f7c:	080049fc 	.word	0x080049fc

08003f80 <__retarget_lock_acquire_recursive>:
 8003f80:	4770      	bx	lr

08003f82 <__retarget_lock_release_recursive>:
 8003f82:	4770      	bx	lr

08003f84 <strcpy>:
 8003f84:	4603      	mov	r3, r0
 8003f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f8a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d1f9      	bne.n	8003f86 <strcpy+0x2>
 8003f92:	4770      	bx	lr

08003f94 <_free_r>:
 8003f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f96:	2900      	cmp	r1, #0
 8003f98:	d044      	beq.n	8004024 <_free_r+0x90>
 8003f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f9e:	9001      	str	r0, [sp, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8003fa6:	bfb8      	it	lt
 8003fa8:	18e4      	addlt	r4, r4, r3
 8003faa:	f7ff fd43 	bl	8003a34 <__malloc_lock>
 8003fae:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <_free_r+0x94>)
 8003fb0:	9801      	ldr	r0, [sp, #4]
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	b933      	cbnz	r3, 8003fc4 <_free_r+0x30>
 8003fb6:	6063      	str	r3, [r4, #4]
 8003fb8:	6014      	str	r4, [r2, #0]
 8003fba:	b003      	add	sp, #12
 8003fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fc0:	f7ff bd3e 	b.w	8003a40 <__malloc_unlock>
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	d908      	bls.n	8003fda <_free_r+0x46>
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1961      	adds	r1, r4, r5
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	bf01      	itttt	eq
 8003fd0:	6819      	ldreq	r1, [r3, #0]
 8003fd2:	685b      	ldreq	r3, [r3, #4]
 8003fd4:	1949      	addeq	r1, r1, r5
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	e7ed      	b.n	8003fb6 <_free_r+0x22>
 8003fda:	461a      	mov	r2, r3
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	b10b      	cbz	r3, 8003fe4 <_free_r+0x50>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d9fa      	bls.n	8003fda <_free_r+0x46>
 8003fe4:	6811      	ldr	r1, [r2, #0]
 8003fe6:	1855      	adds	r5, r2, r1
 8003fe8:	42a5      	cmp	r5, r4
 8003fea:	d10b      	bne.n	8004004 <_free_r+0x70>
 8003fec:	6824      	ldr	r4, [r4, #0]
 8003fee:	4421      	add	r1, r4
 8003ff0:	1854      	adds	r4, r2, r1
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	d1e0      	bne.n	8003fba <_free_r+0x26>
 8003ff8:	681c      	ldr	r4, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	6053      	str	r3, [r2, #4]
 8003ffe:	440c      	add	r4, r1
 8004000:	6014      	str	r4, [r2, #0]
 8004002:	e7da      	b.n	8003fba <_free_r+0x26>
 8004004:	d902      	bls.n	800400c <_free_r+0x78>
 8004006:	230c      	movs	r3, #12
 8004008:	6003      	str	r3, [r0, #0]
 800400a:	e7d6      	b.n	8003fba <_free_r+0x26>
 800400c:	6825      	ldr	r5, [r4, #0]
 800400e:	1961      	adds	r1, r4, r5
 8004010:	428b      	cmp	r3, r1
 8004012:	bf04      	itt	eq
 8004014:	6819      	ldreq	r1, [r3, #0]
 8004016:	685b      	ldreq	r3, [r3, #4]
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	bf04      	itt	eq
 800401c:	1949      	addeq	r1, r1, r5
 800401e:	6021      	streq	r1, [r4, #0]
 8004020:	6054      	str	r4, [r2, #4]
 8004022:	e7ca      	b.n	8003fba <_free_r+0x26>
 8004024:	b003      	add	sp, #12
 8004026:	bd30      	pop	{r4, r5, pc}
 8004028:	20000164 	.word	0x20000164

0800402c <__ssputs_r>:
 800402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	688e      	ldr	r6, [r1, #8]
 8004032:	461f      	mov	r7, r3
 8004034:	42be      	cmp	r6, r7
 8004036:	680b      	ldr	r3, [r1, #0]
 8004038:	4682      	mov	sl, r0
 800403a:	460c      	mov	r4, r1
 800403c:	4690      	mov	r8, r2
 800403e:	d82c      	bhi.n	800409a <__ssputs_r+0x6e>
 8004040:	898a      	ldrh	r2, [r1, #12]
 8004042:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004046:	d026      	beq.n	8004096 <__ssputs_r+0x6a>
 8004048:	6965      	ldr	r5, [r4, #20]
 800404a:	6909      	ldr	r1, [r1, #16]
 800404c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004050:	eba3 0901 	sub.w	r9, r3, r1
 8004054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004058:	1c7b      	adds	r3, r7, #1
 800405a:	444b      	add	r3, r9
 800405c:	106d      	asrs	r5, r5, #1
 800405e:	429d      	cmp	r5, r3
 8004060:	bf38      	it	cc
 8004062:	461d      	movcc	r5, r3
 8004064:	0553      	lsls	r3, r2, #21
 8004066:	d527      	bpl.n	80040b8 <__ssputs_r+0x8c>
 8004068:	4629      	mov	r1, r5
 800406a:	f7ff fc63 	bl	8003934 <_malloc_r>
 800406e:	4606      	mov	r6, r0
 8004070:	b360      	cbz	r0, 80040cc <__ssputs_r+0xa0>
 8004072:	6921      	ldr	r1, [r4, #16]
 8004074:	464a      	mov	r2, r9
 8004076:	f000 fc0d 	bl	8004894 <memcpy>
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004084:	81a3      	strh	r3, [r4, #12]
 8004086:	6126      	str	r6, [r4, #16]
 8004088:	6165      	str	r5, [r4, #20]
 800408a:	444e      	add	r6, r9
 800408c:	eba5 0509 	sub.w	r5, r5, r9
 8004090:	6026      	str	r6, [r4, #0]
 8004092:	60a5      	str	r5, [r4, #8]
 8004094:	463e      	mov	r6, r7
 8004096:	42be      	cmp	r6, r7
 8004098:	d900      	bls.n	800409c <__ssputs_r+0x70>
 800409a:	463e      	mov	r6, r7
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	4632      	mov	r2, r6
 80040a0:	4641      	mov	r1, r8
 80040a2:	f000 fbbb 	bl	800481c <memmove>
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	1b9b      	subs	r3, r3, r6
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	4433      	add	r3, r6
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	2000      	movs	r0, #0
 80040b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b8:	462a      	mov	r2, r5
 80040ba:	f000 fbf9 	bl	80048b0 <_realloc_r>
 80040be:	4606      	mov	r6, r0
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d1e0      	bne.n	8004086 <__ssputs_r+0x5a>
 80040c4:	6921      	ldr	r1, [r4, #16]
 80040c6:	4650      	mov	r0, sl
 80040c8:	f7ff ff64 	bl	8003f94 <_free_r>
 80040cc:	230c      	movs	r3, #12
 80040ce:	f8ca 3000 	str.w	r3, [sl]
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	f04f 30ff 	mov.w	r0, #4294967295
 80040de:	e7e9      	b.n	80040b4 <__ssputs_r+0x88>

080040e0 <_svfiprintf_r>:
 80040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e4:	4698      	mov	r8, r3
 80040e6:	898b      	ldrh	r3, [r1, #12]
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	b09d      	sub	sp, #116	; 0x74
 80040ec:	4607      	mov	r7, r0
 80040ee:	460d      	mov	r5, r1
 80040f0:	4614      	mov	r4, r2
 80040f2:	d50e      	bpl.n	8004112 <_svfiprintf_r+0x32>
 80040f4:	690b      	ldr	r3, [r1, #16]
 80040f6:	b963      	cbnz	r3, 8004112 <_svfiprintf_r+0x32>
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	f7ff fc1b 	bl	8003934 <_malloc_r>
 80040fe:	6028      	str	r0, [r5, #0]
 8004100:	6128      	str	r0, [r5, #16]
 8004102:	b920      	cbnz	r0, 800410e <_svfiprintf_r+0x2e>
 8004104:	230c      	movs	r3, #12
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	e0d0      	b.n	80042b0 <_svfiprintf_r+0x1d0>
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	616b      	str	r3, [r5, #20]
 8004112:	2300      	movs	r3, #0
 8004114:	9309      	str	r3, [sp, #36]	; 0x24
 8004116:	2320      	movs	r3, #32
 8004118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800411c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004120:	2330      	movs	r3, #48	; 0x30
 8004122:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042c8 <_svfiprintf_r+0x1e8>
 8004126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800412a:	f04f 0901 	mov.w	r9, #1
 800412e:	4623      	mov	r3, r4
 8004130:	469a      	mov	sl, r3
 8004132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004136:	b10a      	cbz	r2, 800413c <_svfiprintf_r+0x5c>
 8004138:	2a25      	cmp	r2, #37	; 0x25
 800413a:	d1f9      	bne.n	8004130 <_svfiprintf_r+0x50>
 800413c:	ebba 0b04 	subs.w	fp, sl, r4
 8004140:	d00b      	beq.n	800415a <_svfiprintf_r+0x7a>
 8004142:	465b      	mov	r3, fp
 8004144:	4622      	mov	r2, r4
 8004146:	4629      	mov	r1, r5
 8004148:	4638      	mov	r0, r7
 800414a:	f7ff ff6f 	bl	800402c <__ssputs_r>
 800414e:	3001      	adds	r0, #1
 8004150:	f000 80a9 	beq.w	80042a6 <_svfiprintf_r+0x1c6>
 8004154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004156:	445a      	add	r2, fp
 8004158:	9209      	str	r2, [sp, #36]	; 0x24
 800415a:	f89a 3000 	ldrb.w	r3, [sl]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80a1 	beq.w	80042a6 <_svfiprintf_r+0x1c6>
 8004164:	2300      	movs	r3, #0
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800416e:	f10a 0a01 	add.w	sl, sl, #1
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	9307      	str	r3, [sp, #28]
 8004176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800417a:	931a      	str	r3, [sp, #104]	; 0x68
 800417c:	4654      	mov	r4, sl
 800417e:	2205      	movs	r2, #5
 8004180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004184:	4850      	ldr	r0, [pc, #320]	; (80042c8 <_svfiprintf_r+0x1e8>)
 8004186:	f7fc f833 	bl	80001f0 <memchr>
 800418a:	9a04      	ldr	r2, [sp, #16]
 800418c:	b9d8      	cbnz	r0, 80041c6 <_svfiprintf_r+0xe6>
 800418e:	06d0      	lsls	r0, r2, #27
 8004190:	bf44      	itt	mi
 8004192:	2320      	movmi	r3, #32
 8004194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004198:	0711      	lsls	r1, r2, #28
 800419a:	bf44      	itt	mi
 800419c:	232b      	movmi	r3, #43	; 0x2b
 800419e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a2:	f89a 3000 	ldrb.w	r3, [sl]
 80041a6:	2b2a      	cmp	r3, #42	; 0x2a
 80041a8:	d015      	beq.n	80041d6 <_svfiprintf_r+0xf6>
 80041aa:	9a07      	ldr	r2, [sp, #28]
 80041ac:	4654      	mov	r4, sl
 80041ae:	2000      	movs	r0, #0
 80041b0:	f04f 0c0a 	mov.w	ip, #10
 80041b4:	4621      	mov	r1, r4
 80041b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041ba:	3b30      	subs	r3, #48	; 0x30
 80041bc:	2b09      	cmp	r3, #9
 80041be:	d94d      	bls.n	800425c <_svfiprintf_r+0x17c>
 80041c0:	b1b0      	cbz	r0, 80041f0 <_svfiprintf_r+0x110>
 80041c2:	9207      	str	r2, [sp, #28]
 80041c4:	e014      	b.n	80041f0 <_svfiprintf_r+0x110>
 80041c6:	eba0 0308 	sub.w	r3, r0, r8
 80041ca:	fa09 f303 	lsl.w	r3, r9, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	46a2      	mov	sl, r4
 80041d4:	e7d2      	b.n	800417c <_svfiprintf_r+0x9c>
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	1d19      	adds	r1, r3, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	9103      	str	r1, [sp, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfbb      	ittet	lt
 80041e2:	425b      	neglt	r3, r3
 80041e4:	f042 0202 	orrlt.w	r2, r2, #2
 80041e8:	9307      	strge	r3, [sp, #28]
 80041ea:	9307      	strlt	r3, [sp, #28]
 80041ec:	bfb8      	it	lt
 80041ee:	9204      	strlt	r2, [sp, #16]
 80041f0:	7823      	ldrb	r3, [r4, #0]
 80041f2:	2b2e      	cmp	r3, #46	; 0x2e
 80041f4:	d10c      	bne.n	8004210 <_svfiprintf_r+0x130>
 80041f6:	7863      	ldrb	r3, [r4, #1]
 80041f8:	2b2a      	cmp	r3, #42	; 0x2a
 80041fa:	d134      	bne.n	8004266 <_svfiprintf_r+0x186>
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	9203      	str	r2, [sp, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	bfb8      	it	lt
 8004208:	f04f 33ff 	movlt.w	r3, #4294967295
 800420c:	3402      	adds	r4, #2
 800420e:	9305      	str	r3, [sp, #20]
 8004210:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042d8 <_svfiprintf_r+0x1f8>
 8004214:	7821      	ldrb	r1, [r4, #0]
 8004216:	2203      	movs	r2, #3
 8004218:	4650      	mov	r0, sl
 800421a:	f7fb ffe9 	bl	80001f0 <memchr>
 800421e:	b138      	cbz	r0, 8004230 <_svfiprintf_r+0x150>
 8004220:	9b04      	ldr	r3, [sp, #16]
 8004222:	eba0 000a 	sub.w	r0, r0, sl
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	4082      	lsls	r2, r0
 800422a:	4313      	orrs	r3, r2
 800422c:	3401      	adds	r4, #1
 800422e:	9304      	str	r3, [sp, #16]
 8004230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004234:	4825      	ldr	r0, [pc, #148]	; (80042cc <_svfiprintf_r+0x1ec>)
 8004236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800423a:	2206      	movs	r2, #6
 800423c:	f7fb ffd8 	bl	80001f0 <memchr>
 8004240:	2800      	cmp	r0, #0
 8004242:	d038      	beq.n	80042b6 <_svfiprintf_r+0x1d6>
 8004244:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <_svfiprintf_r+0x1f0>)
 8004246:	bb1b      	cbnz	r3, 8004290 <_svfiprintf_r+0x1b0>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	3307      	adds	r3, #7
 800424c:	f023 0307 	bic.w	r3, r3, #7
 8004250:	3308      	adds	r3, #8
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004256:	4433      	add	r3, r6
 8004258:	9309      	str	r3, [sp, #36]	; 0x24
 800425a:	e768      	b.n	800412e <_svfiprintf_r+0x4e>
 800425c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004260:	460c      	mov	r4, r1
 8004262:	2001      	movs	r0, #1
 8004264:	e7a6      	b.n	80041b4 <_svfiprintf_r+0xd4>
 8004266:	2300      	movs	r3, #0
 8004268:	3401      	adds	r4, #1
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	4619      	mov	r1, r3
 800426e:	f04f 0c0a 	mov.w	ip, #10
 8004272:	4620      	mov	r0, r4
 8004274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004278:	3a30      	subs	r2, #48	; 0x30
 800427a:	2a09      	cmp	r2, #9
 800427c:	d903      	bls.n	8004286 <_svfiprintf_r+0x1a6>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0c6      	beq.n	8004210 <_svfiprintf_r+0x130>
 8004282:	9105      	str	r1, [sp, #20]
 8004284:	e7c4      	b.n	8004210 <_svfiprintf_r+0x130>
 8004286:	fb0c 2101 	mla	r1, ip, r1, r2
 800428a:	4604      	mov	r4, r0
 800428c:	2301      	movs	r3, #1
 800428e:	e7f0      	b.n	8004272 <_svfiprintf_r+0x192>
 8004290:	ab03      	add	r3, sp, #12
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	462a      	mov	r2, r5
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <_svfiprintf_r+0x1f4>)
 8004298:	a904      	add	r1, sp, #16
 800429a:	4638      	mov	r0, r7
 800429c:	f3af 8000 	nop.w
 80042a0:	1c42      	adds	r2, r0, #1
 80042a2:	4606      	mov	r6, r0
 80042a4:	d1d6      	bne.n	8004254 <_svfiprintf_r+0x174>
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	065b      	lsls	r3, r3, #25
 80042aa:	f53f af2d 	bmi.w	8004108 <_svfiprintf_r+0x28>
 80042ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b0:	b01d      	add	sp, #116	; 0x74
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	ab03      	add	r3, sp, #12
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	462a      	mov	r2, r5
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <_svfiprintf_r+0x1f4>)
 80042be:	a904      	add	r1, sp, #16
 80042c0:	4638      	mov	r0, r7
 80042c2:	f000 f879 	bl	80043b8 <_printf_i>
 80042c6:	e7eb      	b.n	80042a0 <_svfiprintf_r+0x1c0>
 80042c8:	080049bc 	.word	0x080049bc
 80042cc:	080049c6 	.word	0x080049c6
 80042d0:	00000000 	.word	0x00000000
 80042d4:	0800402d 	.word	0x0800402d
 80042d8:	080049c2 	.word	0x080049c2

080042dc <_printf_common>:
 80042dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	4616      	mov	r6, r2
 80042e2:	4699      	mov	r9, r3
 80042e4:	688a      	ldr	r2, [r1, #8]
 80042e6:	690b      	ldr	r3, [r1, #16]
 80042e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	bfb8      	it	lt
 80042f0:	4613      	movlt	r3, r2
 80042f2:	6033      	str	r3, [r6, #0]
 80042f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f8:	4607      	mov	r7, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	b10a      	cbz	r2, 8004302 <_printf_common+0x26>
 80042fe:	3301      	adds	r3, #1
 8004300:	6033      	str	r3, [r6, #0]
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	0699      	lsls	r1, r3, #26
 8004306:	bf42      	ittt	mi
 8004308:	6833      	ldrmi	r3, [r6, #0]
 800430a:	3302      	addmi	r3, #2
 800430c:	6033      	strmi	r3, [r6, #0]
 800430e:	6825      	ldr	r5, [r4, #0]
 8004310:	f015 0506 	ands.w	r5, r5, #6
 8004314:	d106      	bne.n	8004324 <_printf_common+0x48>
 8004316:	f104 0a19 	add.w	sl, r4, #25
 800431a:	68e3      	ldr	r3, [r4, #12]
 800431c:	6832      	ldr	r2, [r6, #0]
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	42ab      	cmp	r3, r5
 8004322:	dc26      	bgt.n	8004372 <_printf_common+0x96>
 8004324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004328:	1e13      	subs	r3, r2, #0
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	bf18      	it	ne
 800432e:	2301      	movne	r3, #1
 8004330:	0692      	lsls	r2, r2, #26
 8004332:	d42b      	bmi.n	800438c <_printf_common+0xb0>
 8004334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004338:	4649      	mov	r1, r9
 800433a:	4638      	mov	r0, r7
 800433c:	47c0      	blx	r8
 800433e:	3001      	adds	r0, #1
 8004340:	d01e      	beq.n	8004380 <_printf_common+0xa4>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	6922      	ldr	r2, [r4, #16]
 8004346:	f003 0306 	and.w	r3, r3, #6
 800434a:	2b04      	cmp	r3, #4
 800434c:	bf02      	ittt	eq
 800434e:	68e5      	ldreq	r5, [r4, #12]
 8004350:	6833      	ldreq	r3, [r6, #0]
 8004352:	1aed      	subeq	r5, r5, r3
 8004354:	68a3      	ldr	r3, [r4, #8]
 8004356:	bf0c      	ite	eq
 8004358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800435c:	2500      	movne	r5, #0
 800435e:	4293      	cmp	r3, r2
 8004360:	bfc4      	itt	gt
 8004362:	1a9b      	subgt	r3, r3, r2
 8004364:	18ed      	addgt	r5, r5, r3
 8004366:	2600      	movs	r6, #0
 8004368:	341a      	adds	r4, #26
 800436a:	42b5      	cmp	r5, r6
 800436c:	d11a      	bne.n	80043a4 <_printf_common+0xc8>
 800436e:	2000      	movs	r0, #0
 8004370:	e008      	b.n	8004384 <_printf_common+0xa8>
 8004372:	2301      	movs	r3, #1
 8004374:	4652      	mov	r2, sl
 8004376:	4649      	mov	r1, r9
 8004378:	4638      	mov	r0, r7
 800437a:	47c0      	blx	r8
 800437c:	3001      	adds	r0, #1
 800437e:	d103      	bne.n	8004388 <_printf_common+0xac>
 8004380:	f04f 30ff 	mov.w	r0, #4294967295
 8004384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004388:	3501      	adds	r5, #1
 800438a:	e7c6      	b.n	800431a <_printf_common+0x3e>
 800438c:	18e1      	adds	r1, r4, r3
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	2030      	movs	r0, #48	; 0x30
 8004392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004396:	4422      	add	r2, r4
 8004398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800439c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043a0:	3302      	adds	r3, #2
 80043a2:	e7c7      	b.n	8004334 <_printf_common+0x58>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4622      	mov	r2, r4
 80043a8:	4649      	mov	r1, r9
 80043aa:	4638      	mov	r0, r7
 80043ac:	47c0      	blx	r8
 80043ae:	3001      	adds	r0, #1
 80043b0:	d0e6      	beq.n	8004380 <_printf_common+0xa4>
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7d9      	b.n	800436a <_printf_common+0x8e>
	...

080043b8 <_printf_i>:
 80043b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	7e0f      	ldrb	r7, [r1, #24]
 80043be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043c0:	2f78      	cmp	r7, #120	; 0x78
 80043c2:	4691      	mov	r9, r2
 80043c4:	4680      	mov	r8, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	469a      	mov	sl, r3
 80043ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ce:	d807      	bhi.n	80043e0 <_printf_i+0x28>
 80043d0:	2f62      	cmp	r7, #98	; 0x62
 80043d2:	d80a      	bhi.n	80043ea <_printf_i+0x32>
 80043d4:	2f00      	cmp	r7, #0
 80043d6:	f000 80d4 	beq.w	8004582 <_printf_i+0x1ca>
 80043da:	2f58      	cmp	r7, #88	; 0x58
 80043dc:	f000 80c0 	beq.w	8004560 <_printf_i+0x1a8>
 80043e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e8:	e03a      	b.n	8004460 <_printf_i+0xa8>
 80043ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ee:	2b15      	cmp	r3, #21
 80043f0:	d8f6      	bhi.n	80043e0 <_printf_i+0x28>
 80043f2:	a101      	add	r1, pc, #4	; (adr r1, 80043f8 <_printf_i+0x40>)
 80043f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004465 	.word	0x08004465
 8004400:	080043e1 	.word	0x080043e1
 8004404:	080043e1 	.word	0x080043e1
 8004408:	080043e1 	.word	0x080043e1
 800440c:	080043e1 	.word	0x080043e1
 8004410:	08004465 	.word	0x08004465
 8004414:	080043e1 	.word	0x080043e1
 8004418:	080043e1 	.word	0x080043e1
 800441c:	080043e1 	.word	0x080043e1
 8004420:	080043e1 	.word	0x080043e1
 8004424:	08004569 	.word	0x08004569
 8004428:	08004491 	.word	0x08004491
 800442c:	08004523 	.word	0x08004523
 8004430:	080043e1 	.word	0x080043e1
 8004434:	080043e1 	.word	0x080043e1
 8004438:	0800458b 	.word	0x0800458b
 800443c:	080043e1 	.word	0x080043e1
 8004440:	08004491 	.word	0x08004491
 8004444:	080043e1 	.word	0x080043e1
 8004448:	080043e1 	.word	0x080043e1
 800444c:	0800452b 	.word	0x0800452b
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	602a      	str	r2, [r5, #0]
 8004458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800445c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004460:	2301      	movs	r3, #1
 8004462:	e09f      	b.n	80045a4 <_printf_i+0x1ec>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	0607      	lsls	r7, r0, #24
 800446a:	f103 0104 	add.w	r1, r3, #4
 800446e:	6029      	str	r1, [r5, #0]
 8004470:	d501      	bpl.n	8004476 <_printf_i+0xbe>
 8004472:	681e      	ldr	r6, [r3, #0]
 8004474:	e003      	b.n	800447e <_printf_i+0xc6>
 8004476:	0646      	lsls	r6, r0, #25
 8004478:	d5fb      	bpl.n	8004472 <_printf_i+0xba>
 800447a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800447e:	2e00      	cmp	r6, #0
 8004480:	da03      	bge.n	800448a <_printf_i+0xd2>
 8004482:	232d      	movs	r3, #45	; 0x2d
 8004484:	4276      	negs	r6, r6
 8004486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448a:	485a      	ldr	r0, [pc, #360]	; (80045f4 <_printf_i+0x23c>)
 800448c:	230a      	movs	r3, #10
 800448e:	e012      	b.n	80044b6 <_printf_i+0xfe>
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	6820      	ldr	r0, [r4, #0]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	6029      	str	r1, [r5, #0]
 8004498:	0605      	lsls	r5, r0, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0xe8>
 800449c:	681e      	ldr	r6, [r3, #0]
 800449e:	e002      	b.n	80044a6 <_printf_i+0xee>
 80044a0:	0641      	lsls	r1, r0, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0xe4>
 80044a4:	881e      	ldrh	r6, [r3, #0]
 80044a6:	4853      	ldr	r0, [pc, #332]	; (80045f4 <_printf_i+0x23c>)
 80044a8:	2f6f      	cmp	r7, #111	; 0x6f
 80044aa:	bf0c      	ite	eq
 80044ac:	2308      	moveq	r3, #8
 80044ae:	230a      	movne	r3, #10
 80044b0:	2100      	movs	r1, #0
 80044b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b6:	6865      	ldr	r5, [r4, #4]
 80044b8:	60a5      	str	r5, [r4, #8]
 80044ba:	2d00      	cmp	r5, #0
 80044bc:	bfa2      	ittt	ge
 80044be:	6821      	ldrge	r1, [r4, #0]
 80044c0:	f021 0104 	bicge.w	r1, r1, #4
 80044c4:	6021      	strge	r1, [r4, #0]
 80044c6:	b90e      	cbnz	r6, 80044cc <_printf_i+0x114>
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	d04b      	beq.n	8004564 <_printf_i+0x1ac>
 80044cc:	4615      	mov	r5, r2
 80044ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80044d2:	fb03 6711 	mls	r7, r3, r1, r6
 80044d6:	5dc7      	ldrb	r7, [r0, r7]
 80044d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044dc:	4637      	mov	r7, r6
 80044de:	42bb      	cmp	r3, r7
 80044e0:	460e      	mov	r6, r1
 80044e2:	d9f4      	bls.n	80044ce <_printf_i+0x116>
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10b      	bne.n	8004500 <_printf_i+0x148>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	07de      	lsls	r6, r3, #31
 80044ec:	d508      	bpl.n	8004500 <_printf_i+0x148>
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	6861      	ldr	r1, [r4, #4]
 80044f2:	4299      	cmp	r1, r3
 80044f4:	bfde      	ittt	le
 80044f6:	2330      	movle	r3, #48	; 0x30
 80044f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004500:	1b52      	subs	r2, r2, r5
 8004502:	6122      	str	r2, [r4, #16]
 8004504:	f8cd a000 	str.w	sl, [sp]
 8004508:	464b      	mov	r3, r9
 800450a:	aa03      	add	r2, sp, #12
 800450c:	4621      	mov	r1, r4
 800450e:	4640      	mov	r0, r8
 8004510:	f7ff fee4 	bl	80042dc <_printf_common>
 8004514:	3001      	adds	r0, #1
 8004516:	d14a      	bne.n	80045ae <_printf_i+0x1f6>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	b004      	add	sp, #16
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	f043 0320 	orr.w	r3, r3, #32
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	4833      	ldr	r0, [pc, #204]	; (80045f8 <_printf_i+0x240>)
 800452c:	2778      	movs	r7, #120	; 0x78
 800452e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	6829      	ldr	r1, [r5, #0]
 8004536:	061f      	lsls	r7, r3, #24
 8004538:	f851 6b04 	ldr.w	r6, [r1], #4
 800453c:	d402      	bmi.n	8004544 <_printf_i+0x18c>
 800453e:	065f      	lsls	r7, r3, #25
 8004540:	bf48      	it	mi
 8004542:	b2b6      	uxthmi	r6, r6
 8004544:	07df      	lsls	r7, r3, #31
 8004546:	bf48      	it	mi
 8004548:	f043 0320 	orrmi.w	r3, r3, #32
 800454c:	6029      	str	r1, [r5, #0]
 800454e:	bf48      	it	mi
 8004550:	6023      	strmi	r3, [r4, #0]
 8004552:	b91e      	cbnz	r6, 800455c <_printf_i+0x1a4>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	f023 0320 	bic.w	r3, r3, #32
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	2310      	movs	r3, #16
 800455e:	e7a7      	b.n	80044b0 <_printf_i+0xf8>
 8004560:	4824      	ldr	r0, [pc, #144]	; (80045f4 <_printf_i+0x23c>)
 8004562:	e7e4      	b.n	800452e <_printf_i+0x176>
 8004564:	4615      	mov	r5, r2
 8004566:	e7bd      	b.n	80044e4 <_printf_i+0x12c>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	6826      	ldr	r6, [r4, #0]
 800456c:	6961      	ldr	r1, [r4, #20]
 800456e:	1d18      	adds	r0, r3, #4
 8004570:	6028      	str	r0, [r5, #0]
 8004572:	0635      	lsls	r5, r6, #24
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	d501      	bpl.n	800457c <_printf_i+0x1c4>
 8004578:	6019      	str	r1, [r3, #0]
 800457a:	e002      	b.n	8004582 <_printf_i+0x1ca>
 800457c:	0670      	lsls	r0, r6, #25
 800457e:	d5fb      	bpl.n	8004578 <_printf_i+0x1c0>
 8004580:	8019      	strh	r1, [r3, #0]
 8004582:	2300      	movs	r3, #0
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	4615      	mov	r5, r2
 8004588:	e7bc      	b.n	8004504 <_printf_i+0x14c>
 800458a:	682b      	ldr	r3, [r5, #0]
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	602a      	str	r2, [r5, #0]
 8004590:	681d      	ldr	r5, [r3, #0]
 8004592:	6862      	ldr	r2, [r4, #4]
 8004594:	2100      	movs	r1, #0
 8004596:	4628      	mov	r0, r5
 8004598:	f7fb fe2a 	bl	80001f0 <memchr>
 800459c:	b108      	cbz	r0, 80045a2 <_printf_i+0x1ea>
 800459e:	1b40      	subs	r0, r0, r5
 80045a0:	6060      	str	r0, [r4, #4]
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	2300      	movs	r3, #0
 80045a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ac:	e7aa      	b.n	8004504 <_printf_i+0x14c>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	462a      	mov	r2, r5
 80045b2:	4649      	mov	r1, r9
 80045b4:	4640      	mov	r0, r8
 80045b6:	47d0      	blx	sl
 80045b8:	3001      	adds	r0, #1
 80045ba:	d0ad      	beq.n	8004518 <_printf_i+0x160>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	079b      	lsls	r3, r3, #30
 80045c0:	d413      	bmi.n	80045ea <_printf_i+0x232>
 80045c2:	68e0      	ldr	r0, [r4, #12]
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	4298      	cmp	r0, r3
 80045c8:	bfb8      	it	lt
 80045ca:	4618      	movlt	r0, r3
 80045cc:	e7a6      	b.n	800451c <_printf_i+0x164>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4632      	mov	r2, r6
 80045d2:	4649      	mov	r1, r9
 80045d4:	4640      	mov	r0, r8
 80045d6:	47d0      	blx	sl
 80045d8:	3001      	adds	r0, #1
 80045da:	d09d      	beq.n	8004518 <_printf_i+0x160>
 80045dc:	3501      	adds	r5, #1
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	9903      	ldr	r1, [sp, #12]
 80045e2:	1a5b      	subs	r3, r3, r1
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dcf2      	bgt.n	80045ce <_printf_i+0x216>
 80045e8:	e7eb      	b.n	80045c2 <_printf_i+0x20a>
 80045ea:	2500      	movs	r5, #0
 80045ec:	f104 0619 	add.w	r6, r4, #25
 80045f0:	e7f5      	b.n	80045de <_printf_i+0x226>
 80045f2:	bf00      	nop
 80045f4:	080049cd 	.word	0x080049cd
 80045f8:	080049de 	.word	0x080049de

080045fc <__sflush_r>:
 80045fc:	898a      	ldrh	r2, [r1, #12]
 80045fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004602:	4605      	mov	r5, r0
 8004604:	0710      	lsls	r0, r2, #28
 8004606:	460c      	mov	r4, r1
 8004608:	d458      	bmi.n	80046bc <__sflush_r+0xc0>
 800460a:	684b      	ldr	r3, [r1, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	dc05      	bgt.n	800461c <__sflush_r+0x20>
 8004610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	dc02      	bgt.n	800461c <__sflush_r+0x20>
 8004616:	2000      	movs	r0, #0
 8004618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800461c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800461e:	2e00      	cmp	r6, #0
 8004620:	d0f9      	beq.n	8004616 <__sflush_r+0x1a>
 8004622:	2300      	movs	r3, #0
 8004624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004628:	682f      	ldr	r7, [r5, #0]
 800462a:	6a21      	ldr	r1, [r4, #32]
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	d032      	beq.n	8004696 <__sflush_r+0x9a>
 8004630:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	075a      	lsls	r2, r3, #29
 8004636:	d505      	bpl.n	8004644 <__sflush_r+0x48>
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	1ac0      	subs	r0, r0, r3
 800463c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800463e:	b10b      	cbz	r3, 8004644 <__sflush_r+0x48>
 8004640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004642:	1ac0      	subs	r0, r0, r3
 8004644:	2300      	movs	r3, #0
 8004646:	4602      	mov	r2, r0
 8004648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800464a:	6a21      	ldr	r1, [r4, #32]
 800464c:	4628      	mov	r0, r5
 800464e:	47b0      	blx	r6
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	d106      	bne.n	8004664 <__sflush_r+0x68>
 8004656:	6829      	ldr	r1, [r5, #0]
 8004658:	291d      	cmp	r1, #29
 800465a:	d82b      	bhi.n	80046b4 <__sflush_r+0xb8>
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <__sflush_r+0x108>)
 800465e:	410a      	asrs	r2, r1
 8004660:	07d6      	lsls	r6, r2, #31
 8004662:	d427      	bmi.n	80046b4 <__sflush_r+0xb8>
 8004664:	2200      	movs	r2, #0
 8004666:	6062      	str	r2, [r4, #4]
 8004668:	04d9      	lsls	r1, r3, #19
 800466a:	6922      	ldr	r2, [r4, #16]
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	d504      	bpl.n	800467a <__sflush_r+0x7e>
 8004670:	1c42      	adds	r2, r0, #1
 8004672:	d101      	bne.n	8004678 <__sflush_r+0x7c>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b903      	cbnz	r3, 800467a <__sflush_r+0x7e>
 8004678:	6560      	str	r0, [r4, #84]	; 0x54
 800467a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800467c:	602f      	str	r7, [r5, #0]
 800467e:	2900      	cmp	r1, #0
 8004680:	d0c9      	beq.n	8004616 <__sflush_r+0x1a>
 8004682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004686:	4299      	cmp	r1, r3
 8004688:	d002      	beq.n	8004690 <__sflush_r+0x94>
 800468a:	4628      	mov	r0, r5
 800468c:	f7ff fc82 	bl	8003f94 <_free_r>
 8004690:	2000      	movs	r0, #0
 8004692:	6360      	str	r0, [r4, #52]	; 0x34
 8004694:	e7c0      	b.n	8004618 <__sflush_r+0x1c>
 8004696:	2301      	movs	r3, #1
 8004698:	4628      	mov	r0, r5
 800469a:	47b0      	blx	r6
 800469c:	1c41      	adds	r1, r0, #1
 800469e:	d1c8      	bne.n	8004632 <__sflush_r+0x36>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0c5      	beq.n	8004632 <__sflush_r+0x36>
 80046a6:	2b1d      	cmp	r3, #29
 80046a8:	d001      	beq.n	80046ae <__sflush_r+0xb2>
 80046aa:	2b16      	cmp	r3, #22
 80046ac:	d101      	bne.n	80046b2 <__sflush_r+0xb6>
 80046ae:	602f      	str	r7, [r5, #0]
 80046b0:	e7b1      	b.n	8004616 <__sflush_r+0x1a>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b8:	81a3      	strh	r3, [r4, #12]
 80046ba:	e7ad      	b.n	8004618 <__sflush_r+0x1c>
 80046bc:	690f      	ldr	r7, [r1, #16]
 80046be:	2f00      	cmp	r7, #0
 80046c0:	d0a9      	beq.n	8004616 <__sflush_r+0x1a>
 80046c2:	0793      	lsls	r3, r2, #30
 80046c4:	680e      	ldr	r6, [r1, #0]
 80046c6:	bf08      	it	eq
 80046c8:	694b      	ldreq	r3, [r1, #20]
 80046ca:	600f      	str	r7, [r1, #0]
 80046cc:	bf18      	it	ne
 80046ce:	2300      	movne	r3, #0
 80046d0:	eba6 0807 	sub.w	r8, r6, r7
 80046d4:	608b      	str	r3, [r1, #8]
 80046d6:	f1b8 0f00 	cmp.w	r8, #0
 80046da:	dd9c      	ble.n	8004616 <__sflush_r+0x1a>
 80046dc:	6a21      	ldr	r1, [r4, #32]
 80046de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046e0:	4643      	mov	r3, r8
 80046e2:	463a      	mov	r2, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	47b0      	blx	r6
 80046e8:	2800      	cmp	r0, #0
 80046ea:	dc06      	bgt.n	80046fa <__sflush_r+0xfe>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e78e      	b.n	8004618 <__sflush_r+0x1c>
 80046fa:	4407      	add	r7, r0
 80046fc:	eba8 0800 	sub.w	r8, r8, r0
 8004700:	e7e9      	b.n	80046d6 <__sflush_r+0xda>
 8004702:	bf00      	nop
 8004704:	dfbffffe 	.word	0xdfbffffe

08004708 <_fflush_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	4605      	mov	r5, r0
 800470e:	460c      	mov	r4, r1
 8004710:	b913      	cbnz	r3, 8004718 <_fflush_r+0x10>
 8004712:	2500      	movs	r5, #0
 8004714:	4628      	mov	r0, r5
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	b118      	cbz	r0, 8004722 <_fflush_r+0x1a>
 800471a:	6a03      	ldr	r3, [r0, #32]
 800471c:	b90b      	cbnz	r3, 8004722 <_fflush_r+0x1a>
 800471e:	f7ff fa0f 	bl	8003b40 <__sinit>
 8004722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f3      	beq.n	8004712 <_fflush_r+0xa>
 800472a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800472c:	07d0      	lsls	r0, r2, #31
 800472e:	d404      	bmi.n	800473a <_fflush_r+0x32>
 8004730:	0599      	lsls	r1, r3, #22
 8004732:	d402      	bmi.n	800473a <_fflush_r+0x32>
 8004734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004736:	f7ff fc23 	bl	8003f80 <__retarget_lock_acquire_recursive>
 800473a:	4628      	mov	r0, r5
 800473c:	4621      	mov	r1, r4
 800473e:	f7ff ff5d 	bl	80045fc <__sflush_r>
 8004742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004744:	07da      	lsls	r2, r3, #31
 8004746:	4605      	mov	r5, r0
 8004748:	d4e4      	bmi.n	8004714 <_fflush_r+0xc>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	059b      	lsls	r3, r3, #22
 800474e:	d4e1      	bmi.n	8004714 <_fflush_r+0xc>
 8004750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004752:	f7ff fc16 	bl	8003f82 <__retarget_lock_release_recursive>
 8004756:	e7dd      	b.n	8004714 <_fflush_r+0xc>

08004758 <__swhatbuf_r>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	460c      	mov	r4, r1
 800475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004760:	2900      	cmp	r1, #0
 8004762:	b096      	sub	sp, #88	; 0x58
 8004764:	4615      	mov	r5, r2
 8004766:	461e      	mov	r6, r3
 8004768:	da0d      	bge.n	8004786 <__swhatbuf_r+0x2e>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	bf0c      	ite	eq
 8004776:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800477a:	2340      	movne	r3, #64	; 0x40
 800477c:	2000      	movs	r0, #0
 800477e:	6031      	str	r1, [r6, #0]
 8004780:	602b      	str	r3, [r5, #0]
 8004782:	b016      	add	sp, #88	; 0x58
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	466a      	mov	r2, sp
 8004788:	f000 f862 	bl	8004850 <_fstat_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	dbec      	blt.n	800476a <__swhatbuf_r+0x12>
 8004790:	9901      	ldr	r1, [sp, #4]
 8004792:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004796:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800479a:	4259      	negs	r1, r3
 800479c:	4159      	adcs	r1, r3
 800479e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a2:	e7eb      	b.n	800477c <__swhatbuf_r+0x24>

080047a4 <__smakebuf_r>:
 80047a4:	898b      	ldrh	r3, [r1, #12]
 80047a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047a8:	079d      	lsls	r5, r3, #30
 80047aa:	4606      	mov	r6, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	d507      	bpl.n	80047c0 <__smakebuf_r+0x1c>
 80047b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	2301      	movs	r3, #1
 80047ba:	6163      	str	r3, [r4, #20]
 80047bc:	b002      	add	sp, #8
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	ab01      	add	r3, sp, #4
 80047c2:	466a      	mov	r2, sp
 80047c4:	f7ff ffc8 	bl	8004758 <__swhatbuf_r>
 80047c8:	9900      	ldr	r1, [sp, #0]
 80047ca:	4605      	mov	r5, r0
 80047cc:	4630      	mov	r0, r6
 80047ce:	f7ff f8b1 	bl	8003934 <_malloc_r>
 80047d2:	b948      	cbnz	r0, 80047e8 <__smakebuf_r+0x44>
 80047d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d8:	059a      	lsls	r2, r3, #22
 80047da:	d4ef      	bmi.n	80047bc <__smakebuf_r+0x18>
 80047dc:	f023 0303 	bic.w	r3, r3, #3
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	81a3      	strh	r3, [r4, #12]
 80047e6:	e7e3      	b.n	80047b0 <__smakebuf_r+0xc>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	6020      	str	r0, [r4, #0]
 80047ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	9b00      	ldr	r3, [sp, #0]
 80047f4:	6163      	str	r3, [r4, #20]
 80047f6:	9b01      	ldr	r3, [sp, #4]
 80047f8:	6120      	str	r0, [r4, #16]
 80047fa:	b15b      	cbz	r3, 8004814 <__smakebuf_r+0x70>
 80047fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004800:	4630      	mov	r0, r6
 8004802:	f000 f837 	bl	8004874 <_isatty_r>
 8004806:	b128      	cbz	r0, 8004814 <__smakebuf_r+0x70>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	431d      	orrs	r5, r3
 8004818:	81a5      	strh	r5, [r4, #12]
 800481a:	e7cf      	b.n	80047bc <__smakebuf_r+0x18>

0800481c <memmove>:
 800481c:	4288      	cmp	r0, r1
 800481e:	b510      	push	{r4, lr}
 8004820:	eb01 0402 	add.w	r4, r1, r2
 8004824:	d902      	bls.n	800482c <memmove+0x10>
 8004826:	4284      	cmp	r4, r0
 8004828:	4623      	mov	r3, r4
 800482a:	d807      	bhi.n	800483c <memmove+0x20>
 800482c:	1e43      	subs	r3, r0, #1
 800482e:	42a1      	cmp	r1, r4
 8004830:	d008      	beq.n	8004844 <memmove+0x28>
 8004832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483a:	e7f8      	b.n	800482e <memmove+0x12>
 800483c:	4402      	add	r2, r0
 800483e:	4601      	mov	r1, r0
 8004840:	428a      	cmp	r2, r1
 8004842:	d100      	bne.n	8004846 <memmove+0x2a>
 8004844:	bd10      	pop	{r4, pc}
 8004846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800484e:	e7f7      	b.n	8004840 <memmove+0x24>

08004850 <_fstat_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	; (8004870 <_fstat_r+0x20>)
 8004854:	2300      	movs	r3, #0
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	602b      	str	r3, [r5, #0]
 800485e:	f7fc fe45 	bl	80014ec <_fstat>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	d102      	bne.n	800486c <_fstat_r+0x1c>
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	b103      	cbz	r3, 800486c <_fstat_r+0x1c>
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	bd38      	pop	{r3, r4, r5, pc}
 800486e:	bf00      	nop
 8004870:	200002a8 	.word	0x200002a8

08004874 <_isatty_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d06      	ldr	r5, [pc, #24]	; (8004890 <_isatty_r+0x1c>)
 8004878:	2300      	movs	r3, #0
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	f7fc fe44 	bl	800150c <_isatty>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_isatty_r+0x1a>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_isatty_r+0x1a>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	200002a8 	.word	0x200002a8

08004894 <memcpy>:
 8004894:	440a      	add	r2, r1
 8004896:	4291      	cmp	r1, r2
 8004898:	f100 33ff 	add.w	r3, r0, #4294967295
 800489c:	d100      	bne.n	80048a0 <memcpy+0xc>
 800489e:	4770      	bx	lr
 80048a0:	b510      	push	{r4, lr}
 80048a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048aa:	4291      	cmp	r1, r2
 80048ac:	d1f9      	bne.n	80048a2 <memcpy+0xe>
 80048ae:	bd10      	pop	{r4, pc}

080048b0 <_realloc_r>:
 80048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	4680      	mov	r8, r0
 80048b6:	4614      	mov	r4, r2
 80048b8:	460e      	mov	r6, r1
 80048ba:	b921      	cbnz	r1, 80048c6 <_realloc_r+0x16>
 80048bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	4611      	mov	r1, r2
 80048c2:	f7ff b837 	b.w	8003934 <_malloc_r>
 80048c6:	b92a      	cbnz	r2, 80048d4 <_realloc_r+0x24>
 80048c8:	f7ff fb64 	bl	8003f94 <_free_r>
 80048cc:	4625      	mov	r5, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	f000 f81b 	bl	800490e <_malloc_usable_size_r>
 80048d8:	4284      	cmp	r4, r0
 80048da:	4607      	mov	r7, r0
 80048dc:	d802      	bhi.n	80048e4 <_realloc_r+0x34>
 80048de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048e2:	d812      	bhi.n	800490a <_realloc_r+0x5a>
 80048e4:	4621      	mov	r1, r4
 80048e6:	4640      	mov	r0, r8
 80048e8:	f7ff f824 	bl	8003934 <_malloc_r>
 80048ec:	4605      	mov	r5, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d0ed      	beq.n	80048ce <_realloc_r+0x1e>
 80048f2:	42bc      	cmp	r4, r7
 80048f4:	4622      	mov	r2, r4
 80048f6:	4631      	mov	r1, r6
 80048f8:	bf28      	it	cs
 80048fa:	463a      	movcs	r2, r7
 80048fc:	f7ff ffca 	bl	8004894 <memcpy>
 8004900:	4631      	mov	r1, r6
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff fb46 	bl	8003f94 <_free_r>
 8004908:	e7e1      	b.n	80048ce <_realloc_r+0x1e>
 800490a:	4635      	mov	r5, r6
 800490c:	e7df      	b.n	80048ce <_realloc_r+0x1e>

0800490e <_malloc_usable_size_r>:
 800490e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004912:	1f18      	subs	r0, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	bfbc      	itt	lt
 8004918:	580b      	ldrlt	r3, [r1, r0]
 800491a:	18c0      	addlt	r0, r0, r3
 800491c:	4770      	bx	lr
	...

08004920 <_init>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr

0800492c <_fini>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr
